class tf.Graph
tf.Graph.__init__()
tf.Graph.as_default()
tf.Graph.as_graph_def(from_version=None, add_shapes=False)
tf.Graph.finalize()
tf.Graph.finalized
tf.Graph.control_dependencies(control_inputs)
tf.Graph.device(device_name_or_function)
tf.Graph.name_scope(name)
tf.Graph.add_to_collection(name, value)
tf.Graph.add_to_collections(names, value)
tf.Graph.get_collection(name, scope=None)
tf.Graph.get_collection_ref(name)
tf.Graph.as_graph_element(obj, allow_tensor=True,allow_operation=True)
tf.Graph.get_operation_by_name(name)
tf.Graph.get_tensor_by_name(name)
tf.Graph.get_operations()
tf.Graph.seed
tf.Graph.unique_name(name, mark_as_used=True)
tf.Graph.version
tf.Graph.graph_def_versions
tf.Graph.create_op(op_type, inputs, dtypes, input_types=None,name=None, attrs=None, op_def=None, compute_shapes=True,compute_device=True)
tf.Graph.gradient_override_map(op_type_map)
tf.Graph.building_function
tf.Graph.clear_collection(name)
tf.Graph.colocate_with(op, ignore_existing=False)
tf.Graph.container(container_name)
tf.Graph.get_all_collection_keys()
tf.Graph.is_feedable(tensor)
tf.Graph.is_fetchable(tensor_or_op)
tf.Graph.prevent_feeding(tensor)
tf.Graph.prevent_fetching(op)
class tf.Operation
tf.Operation.name
tf.Operation.type
tf.Operation.inputs
tf.Operation.control_inputs
tf.Operation.outputs
tf.Operation.device
tf.Operation.graph
tf.Operation.run(feed_dict=None, session=None)
tf.Operation.get_attr(name)
tf.Operation.traceback
tf.Operation.__init__(node_def, g, inputs=None, output_types=None,control_inputs=None, input_types=None, original_op=None, op_def=None)
tf.Operation.__str__()
tf.Operation.colocation_groups()
tf.Operation.node_def
tf.Operation.op_def
tf.Operation.values()
class tf.Tensor
tf.Tensor.dtype
tf.Tensor.name
tf.Tensor.value_index
tf.Tensor.graph
tf.Tensor.op
tf.Tensor.consumers()
tf.Tensor.eval(feed_dict=None, session=None)
tf.Tensor.get_shape()
tf.Tensor.set_shape(shape)
tf.Tensor.__abs__(x, name=None)
tf.Tensor.__add__(x, y)
tf.Tensor.__and__(x, y)
tf.Tensor.__bool__()
tf.Tensor.__div__(x, y)
tf.Tensor.__eq__(other)
tf.Tensor.__floordiv__(x, y)
tf.Tensor.__ge__(x, y, name=None)
tf.Tensor.__getitem__(tensor, slice_spec, var=None)
tf.Tensor.__gt__(x, y, name=None)
tf.Tensor.__hash__()
tf.Tensor.__init__(op, value_index, dtype)
tf.Tensor.__invert__(x, name=None)
tf.Tensor.__iter__()
tf.Tensor.__le__(x, y, name=None)
tf.Tensor.__lt__(x, y, name=None)
tf.Tensor.__mod__(x, y)
tf.Tensor.__mul__(x, y)
tf.Tensor.__neg__(x, name=None)
tf.Tensor.__nonzero__()
tf.Tensor.__or__(x, y)
tf.Tensor.__pow__(x, y)
tf.Tensor.__radd__(y, x)
tf.Tensor.__rand__(y, x)
tf.Tensor.__rdiv__(y, x)
tf.Tensor.__repr__()
tf.Tensor.__rfloordiv__(y, x)
tf.Tensor.__rmod__(y, x)
tf.Tensor.__rmul__(y, x)
tf.Tensor.__ror__(y, x)
tf.Tensor.__rpow__(y, x)
tf.Tensor.__rsub__(y, x)
tf.Tensor.__rtruediv__(y, x)
tf.Tensor.__rxor__(y, x)
tf.Tensor.__str__()
tf.Tensor.__sub__(x, y)
tf.Tensor.__truediv__(x, y)
tf.Tensor.__xor__(x, y)
tf.Tensor.device
class tf.DType
tf.DType.is_compatible_with(other)
tf.DType.name
tf.DType.base_dtype
tf.DType.real_dtype
tf.DType.is_floating
tf.DType.is_complex
tf.DType.is_integer
tf.DType.is_quantized
tf.DType.is_unsigned
tf.DType.as_numpy_dtype
tf.DType.as_datatype_enum
tf.DType.limits
tf.DType.__eq__(other)
tf.DType.__hash__()
tf.DType.__init__(type_enum)
tf.DType.__ne__(other)
tf.DType.__repr__()
tf.DType.__str__()
tf.DType.is_numpy_compatible
tf.DType.max
tf.DType.min
tf.DType.size
tf.as_dtype(type_value)
tf.device(device_name_or_function)
tf.container(container_name)
tf.name_scope(name, default_name=None, values=None)
tf.control_dependencies(control_inputs)
tf.convert_to_tensor(value, dtype=None, name=None, as_ref=False,preferred_dtype=None)
tf.convert_to_tensor_or_indexed_slices(value, dtype=None, name=None,as_ref=False)
tf.get_default_graph()
tf.reset_default_graph()
tf.import_graph_def(graph_def, input_map=None, return_elements=None,name=None, op_dict=None, producer_op_list=None)
tf.load_file_system_library(library_filename)
tf.load_op_library(library_filename)
tf.add_to_collection(name, value)
tf.get_collection(key, scope=None)
tf.get_collection_ref(key)
class tf.GraphKeys
class tf.RegisterGradient
tf.RegisterGradient.__init__(op_type)
tf.RegisterGradient.__call__(f)
tf.NotDifferentiable(op_type)
tf.NoGradient(op_type)
class tf.RegisterShape
tf.RegisterShape.__call__(f)
tf.RegisterShape.__init__(op_type)
class tf.TensorShape
tf.TensorShape.merge_with(other)
tf.TensorShape.concatenate(other)
tf.TensorShape.ndims
tf.TensorShape.dims
tf.TensorShape.as_list()
tf.TensorShape.as_proto()
tf.TensorShape.is_compatible_with(other)
tf.TensorShape.is_fully_defined()
tf.TensorShape.with_rank(rank)
tf.TensorShape.with_rank_at_least(rank)
tf.TensorShape.with_rank_at_most(rank)
tf.TensorShape.assert_has_rank(rank)
tf.TensorShape.assert_same_rank(other)
tf.TensorShape.assert_is_compatible_with(other)
tf.TensorShape.assert_is_fully_defined()
tf.TensorShape.__bool__()
tf.TensorShape.__eq__(other)
tf.TensorShape.__getitem__(key)
tf.TensorShape.__init__(dims)
tf.TensorShape.__iter__()
tf.TensorShape.__len__()
tf.TensorShape.__ne__(other)
tf.TensorShape.__nonzero__()
tf.TensorShape.__repr__()
tf.TensorShape.__str__()
tf.TensorShape.num_elements()
class tf.Dimension
tf.Dimension.__add__(other)
tf.Dimension.__div__(other)
tf.Dimension.__eq__(other)
tf.Dimension.__floordiv__(other)
tf.Dimension.__ge__(other)
tf.Dimension.__gt__(other)
tf.Dimension.__index__()
tf.Dimension.__init__(value)
tf.Dimension.__int__()
tf.Dimension.__le__(other)
tf.Dimension.__lt__(other)
tf.Dimension.__mod__(other)
tf.Dimension.__mul__(other)
tf.Dimension.__ne__(other)
tf.Dimension.__repr__()
tf.Dimension.__str__()
tf.Dimension.__sub__(other)
tf.Dimension.assert_is_compatible_with(other)
tf.Dimension.is_compatible_with(other)
tf.Dimension.merge_with(other)
tf.Dimension.value
tf.op_scope(values, name, default_name=None)
tf.get_seed(op_seed)
tf.register_tensor_conversion_function(base_type,conversion_func, priority=100)
class tf.DeviceSpec
tf.DeviceSpec.__init__(job=None, replica=None, task=None,device_type=None, device_index=None)
tf.DeviceSpec.from_string(spec)
tf.DeviceSpec.job
tf.DeviceSpec.merge_from(dev)
tf.DeviceSpec.parse_from_string(spec)
tf.DeviceSpec.replica
tf.DeviceSpec.task
tf.DeviceSpec.to_string()
tf.assert_negative(x, data=None, summarize=None, message=None,name=None)
tf.assert_positive(x, data=None, summarize=None, message=None,name=None)
tf.assert_proper_iterable(values)
tf.assert_non_negative(x, data=None, summarize=None,message=None, name=None)
tf.assert_non_positive(x, data=None, summarize=None,message=None, name=None)
tf.assert_equal(x, y, data=None, summarize=None, message=None,name=None)
tf.assert_integer(x, message=None, name=None)
tf.assert_less(x, y, data=None, summarize=None, message=None,name=None)
tf.assert_less_equal(x, y, data=None, summarize=None,message=None, name=None)
tf.assert_greater(x, y, data=None, summarize=None,message=None, name=None)
tf.assert_greater_equal(x, y, data=None, summarize=None,message=None, name=None)
tf.assert_rank(x, rank, data=None, summarize=None,message=None, name=None)
tf.assert_rank_at_least(x, rank, data=None, summarize=None,message=None, name=None)
tf.assert_type(tensor, tf_type, message=None, name=None)
tf.is_non_decreasing(x, name=None)
tf.is_numeric_tensor(tensor)
tf.is_strictly_increasing(x, name=None)
tf.zeros(shape, dtype=tf.float32, name=None)
tf.zeros_like(tensor, dtype=None, name=None, optimize=True)
tf.ones(shape, dtype=tf.float32, name=None)
tf.ones_like(tensor, dtype=None, name=None, optimize=True)
tf.fill(dims, value, name=None)
tf.constant(value, dtype=None, shape=None, name='Const',verify_shape=False)
tf.linspace(start, stop, num, name=None)
tf.range(start, limit=None, delta=1, dtype=None, name='range')
tf.random_normal(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)
tf.truncated_normal(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)
tf.random_uniform(shape, minval=0, maxval=None, dtype=tf.float32, seed=None, name=None)
tf.random_shuffle(value, seed=None, name=None)
tf.random_crop(value, size, seed=None, name=None)
tf.multinomial(logits, num_samples, seed=None, name=None)
tf.random_gamma(shape, alpha, beta=None, dtype=tf.float32,seed=None, name=None)
tf.set_random_seed(seed)
class tf.Variable
tf.Variable.__init__(initial_value=None, trainable=True,collections=None, validate_shape=True, caching_device=None, name=None,variable_def=None, dtype=None, expected_shape=None, import_scope=None)
tf.Variable.initialized_value()
tf.Variable.assign(value, use_locking=False)
tf.Variable.assign_add(delta, use_locking=False)
tf.Variable.assign_sub(delta, use_locking=False)
tf.Variable.scatter_sub(sparse_delta, use_locking=False)
tf.Variable.count_up_to(limit)
tf.Variable.eval(session=None)
tf.Variable.name
tf.Variable.dtype
tf.Variable.get_shape()
tf.Variable.device
tf.Variable.initializer
tf.Variable.graph
tf.Variable.op
tf.Variable.__abs__(a, *args)
tf.Variable.__add__(a, *args)
tf.Variable.__and__(a, *args)
tf.Variable.__div__(a, *args)
tf.Variable.__floordiv__(a, *args)
tf.Variable.__ge__(a, *args)
tf.Variable.__getitem__(var, slice_spec)
tf.Variable.__gt__(a, *args)
tf.Variable.__invert__(a, *args)
tf.Variable.__iter__()
tf.Variable.__le__(a, *args)
tf.Variable.__lt__(a, *args)
tf.Variable.__mod__(a, *args)
tf.Variable.__mul__(a, *args)
tf.Variable.__neg__(a, *args)
tf.Variable.__or__(a, *args)
tf.Variable.__pow__(a, *args)
tf.Variable.__radd__(a, *args)
tf.Variable.__rand__(a, *args)
tf.Variable.__rdiv__(a, *args)
tf.Variable.__rfloordiv__(a, *args)
tf.Variable.__rmod__(a, *args)
tf.Variable.__rmul__(a, *args)
tf.Variable.__ror__(a, *args)
tf.Variable.__rpow__(a, *args)
tf.Variable.__rsub__(a, *args)
tf.Variable.__rtruediv__(a, *args)
tf.Variable.__rxor__(a, *args)
tf.Variable.__str__()
tf.Variable.__sub__(a, *args)
tf.Variable.__truediv__(a, *args)
tf.Variable.__xor__(a, *args)
tf.Variable.from_proto(variable_def, import_scope=None)
tf.Variable.initial_value
tf.Variable.read_value()
tf.Variable.set_shape(shape)
tf.Variable.to_proto(export_scope=None)
tf.Variable.value()
tf.global_variables()
tf.local_variables()
tf.model_variables()
tf.trainable_variables()
tf.moving_average_variables()
tf.global_variables_initializer()
tf.local_variables_initializer()
tf.variables_initializer(var_list, name='init')
tf.is_variable_initialized(variable)
tf.report_uninitialized_variables(var_list=None,name='report_uninitialized_variables')
tf.assert_variables_initialized(var_list=None)
tf.assign(ref, value, validate_shape=None, use_locking=None,name=None)
tf.assign_add(ref, value, use_locking=None, name=None)
tf.assign_sub(ref, value, use_locking=None, name=None)
class tf.train.Saver
tf.train.Saver.__init__(var_list=None, reshape=False, sharded=False,max_to_keep=5, keep_checkpoint_every_n_hours=10000.0, name=None,restore_sequentially=False, saver_def=None, builder=None,defer_build=False, allow_empty=False, write_version=2,pad_step_number=False)
tf.train.Saver.save(sess, save_path, global_step=None,latest_filename=None, meta_graph_suffix='meta', write_meta_graph=True,write_state=True)
tf.train.Saver.restore(sess, save_path)
tf.train.Saver.last_checkpoints
tf.train.Saver.set_last_checkpoints_with_time(last_checkpoints_with_time)
tf.train.Saver.recover_last_checkpoints(checkpoint_paths)
tf.train.Saver.as_saver_def()
tf.train.Saver.build()
tf.train.Saver.export_meta_graph(filename=None, collection_list=None,as_text=False, export_scope=None, clear_devices=False)
tf.train.Saver.from_proto(saver_def, import_scope=None)
tf.train.Saver.set_last_checkpoints(last_checkpoints)
tf.train.Saver.to_proto(export_scope=None)
tf.train.latest_checkpoint(checkpoint_dir, latest_filename=None)
tf.train.get_checkpoint_state(checkpoint_dir, latest_filename=None)
tf.train.update_checkpoint_state(save_dir, model_checkpoint_path,all_model_checkpoint_paths=None, latest_filename=None)
tf.get_variable(name, shape=None, dtype=None, initializer=None,regularizer=None, trainable=True, collections=None, caching_device=None,partitioner=None, validate_shape=True, custom_getter=None)
class tf.VariableScope
tf.VariableScope.__init__(reuse, name='', initializer=None,regularizer=None, caching_device=None, partitioner=None,custom_getter=None, name_scope='', dtype=tf.float32)
tf.VariableScope.caching_device
tf.VariableScope.custom_getter
tf.VariableScope.dtype
tf.VariableScope.get_variable(var_store, name, shape=None, dtype=None,initializer=None, regularizer=None, trainable=True, collections=None,caching_device=None, partitioner=None, validate_shape=True,custom_getter=None)
tf.VariableScope.initializer
tf.VariableScope.name
tf.VariableScope.original_name_scope
tf.VariableScope.partitioner
tf.VariableScope.regularizer
tf.VariableScope.reuse
tf.VariableScope.reuse_variables()
tf.VariableScope.set_caching_device(caching_device)
tf.VariableScope.set_custom_getter(custom_getter)
tf.VariableScope.set_dtype(dtype)
tf.VariableScope.set_initializer(initializer)
tf.VariableScope.set_partitioner(partitioner)
tf.VariableScope.set_regularizer(regularizer)
tf.variable_scope(name_or_scope, default_name=None, values=None,initializer=None, regularizer=None, caching_device=None, partitioner=None,custom_getter=None, reuse=None, dtype=None)
tf.variable_op_scope(values, name_or_scope, default_name=None,initializer=None, regularizer=None, caching_device=None, partitioner=None,custom_getter=None, reuse=None, dtype=None)
tf.get_variable_scope()
tf.make_template(name_, func_, create_scope_now_=False, unique_name_=None,**kwargs)
tf.no_regularizer(_)
tf.constant_initializer(value=0, dtype=tf.float32)
tf.random_normal_initializer(mean=0.0, stddev=1.0, seed=None, dtype=tf.float32)
tf.truncated_normal_initializer(mean=0.0, stddev=1.0, seed=None, dtype=tf.float32)
tf.random_uniform_initializer(minval=0, maxval=None, seed=None, dtype=tf.float32)
tf.uniform_unit_scaling_initializer(factor=1.0, seed=None, dtype=tf.float32)
tf.zeros_initializer(shape, dtype=tf.float32, partition_info=None)
tf.ones_initializer(dtype=tf.float32, partition_info=None)
tf.orthogonal_initializer(gain=1.0, dtype=tf.float32, seed=None)
tf.fixed_size_partitioner(num_shards, axis=0)
tf.variable_axis_size_partitioner(max_shard_bytes, axis=0,bytes_per_string_element=16, max_shards=None)
tf.min_max_variable_partitioner(max_partitions=1, axis=0,min_slice_size=262144, bytes_per_string_element=16)
tf.scatter_update(ref, indices, updates,use_locking=None, name=None)
tf.scatter_add(ref, indices, updates, use_locking=None,name=None)
tf.scatter_sub(ref, indices, updates, use_locking=None,name=None)
tf.scatter_mul(ref, indices, updates, use_locking=None,name=None)
tf.scatter_div(ref, indices, updates, use_locking=None,name=None)
tf.scatter_nd_update(ref, indices, updates,use_locking=None, name=None)
tf.scatter_nd_add(ref, indices, updates,use_locking=None, name=None)
tf.scatter_nd_sub(ref, indices, updates,use_locking=None, name=None)
tf.sparse_mask(a, mask_indices, name=None)
class tf.IndexedSlices
tf.IndexedSlices.__init__(values, indices,dense_shape=None)
tf.IndexedSlices.values
tf.IndexedSlices.indices
tf.IndexedSlices.dense_shape
tf.IndexedSlices.name
tf.IndexedSlices.dtype
tf.IndexedSlices.device
tf.IndexedSlices.op
tf.IndexedSlices.__neg__()
tf.IndexedSlices.__str__()
tf.IndexedSlices.graph
tf.initialize_all_tables(name='init_all_tables')
tf.train.export_meta_graph(filename=None, meta_info_def=None,graph_def=None, saver_def=None, collection_list=None, as_text=False,graph=None, export_scope=None, clear_devices=False, **kwargs)
tf.train.import_meta_graph(meta_graph_or_file, clear_devices=False,import_scope=None, **kwargs)
tf.all_variables(*args, **kwargs)
tf.initialize_all_variables(*args, **kwargs)
tf.initialize_local_variables(*args, **kwargs)
tf.initialize_variables(*args, **kwargs)
tf.string_to_number(string_tensor, out_type=None,name=None)
tf.to_double(x, name='ToDouble')
tf.to_float(x, name='ToFloat')
tf.to_bfloat16(x, name='ToBFloat16')
tf.to_int32(x, name='ToInt32')
tf.to_int64(x, name='ToInt64')
tf.cast(x, dtype, name=None)
tf.bitcast(input, type, name=None)
tf.saturate_cast(value, dtype, name=None)
tf.shape(input, name=None, out_type=tf.int32)
tf.shape_n(input, out_type=None, name=None)
tf.size(input, name=None, out_type=tf.int32)
tf.rank(input, name=None)
tf.reshape(tensor, shape, name=None)
tf.squeeze(input, axis=None, name=None,squeeze_dims=None)
tf.expand_dims(input, axis=None, name=None, dim=None)
tf.meshgrid(*args, **kwargs)
tf.slice(input_, begin, size, name=None)
tf.strided_slice(input_, begin, end, strides, begin_mask=0, end_mask=0,ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0, var=None,name=None)
tf.split(split_dim, num_split, value, name='split')
tf.split_v(value, size_splits, split_dim=0, num=None, name='split_v')
tf.tile(input, multiples, name=None)
tf.pad(tensor, paddings, mode='CONSTANT', name=None)
tf.concat(concat_dim, values, name='concat')
tf.concat_v2(values, axis, name='concat_v2')
tf.stack(values, axis=0, name='stack')
tf.pack(values, axis=0, name='pack')
tf.unstack(value, num=None, axis=0, name='unstack')
tf.unpack(value, num=None, axis=0, name='unpack')
tf.reverse_sequence(input, seq_lengths, seq_dim, batch_dim=None,name=None)
tf.reverse(tensor, dims, name=None)
tf.reverse_v2(tensor, axis, name=None)
tf.transpose(a, perm=None, name='transpose')
tf.extract_image_patches(images, ksizes, strides, rates, padding,name=None)
tf.space_to_batch_nd(input, block_shape, paddings, name=None)
tf.space_to_batch(input, paddings, block_size, name=None)
tf.required_space_to_batch_paddings(input_shape, block_shape,base_paddings=None, name=None)
tf.batch_to_space_nd(input, block_shape, crops, name=None)
tf.batch_to_space(input, crops, block_size, name=None)
tf.space_to_depth(input, block_size, name=None)
tf.depth_to_space(input, block_size, name=None)
tf.gather(params, indices, validate_indices=None, name=None)
tf.gather_nd(params, indices, name=None)
tf.unique_with_counts(x, out_idx=None, name=None)
tf.scatter_nd(indices, updates, shape, name=None)
tf.dynamic_partition(data, partitions, num_partitions, name=None)
tf.dynamic_stitch(indices, data, name=None)
tf.boolean_mask(tensor, mask, name='boolean_mask')
tf.one_hot(indices, depth, on_value=None, off_value=None, axis=None,dtype=None, name=None)
tf.sequence_mask(lengths, maxlen=None, dtype=tf.bool, name=None)
tf.dequantize(input, min_range, max_range, mode=None, name=None)
tf.quantize_v2(input, min_range, max_range, T, mode=None, name=None)
tf.quantized_concat(concat_dim, values, input_mins, input_maxes,name=None)
tf.setdiff1d(x, y, index_dtype=tf.int32, name=None)
tf.fake_quant_with_min_max_args(inputs, min=None, max=None,name=None)
tf.fake_quant_with_min_max_args_gradient(gradients, inputs,min=None, max=None, name=None)
tf.fake_quant_with_min_max_vars(inputs, min, max, name=None)
tf.fake_quant_with_min_max_vars_gradient(gradients, inputs,min, max, name=None)
tf.fake_quant_with_min_max_vars_per_channel(inputs, min, max,name=None)
tf.fake_quant_with_min_max_vars_per_channel_gradient(gradients, inputs, min, max, name=None)
tf.add(x, y, name=None)
tf.subtract(x, y, name=None)
tf.multiply(x, y, name=None)
tf.scalar_mul(scalar, x)
tf.div(x, y, name=None)
tf.divide(x, y, name=None)
tf.truediv(x, y, name=None)
tf.floordiv(x, y, name=None)
tf.realdiv(x, y, name=None)
tf.truncatediv(x, y, name=None)
tf.floor_div(x, y, name=None)
tf.truncatemod(x, y, name=None)
tf.floormod(x, y, name=None)
tf.mod(x, y, name=None)
tf.cross(a, b, name=None)
tf.add_n(inputs, name=None)
tf.abs(x, name=None)
tf.negative(x, name=None)
tf.sign(x, name=None)
tf.reciprocal(x, name=None)
tf.square(x, name=None)
tf.round(x, name=None)
tf.sqrt(x, name=None)
tf.rsqrt(x, name=None)
tf.pow(x, y, name=None)
tf.exp(x, name=None)
tf.log(x, name=None)
tf.log1p(x, name=None)
tf.ceil(x, name=None)
tf.floor(x, name=None)
tf.maximum(x, y, name=None)
tf.minimum(x, y, name=None)
tf.cos(x, name=None)
tf.sin(x, name=None)
tf.lbeta(x, name='lbeta')
tf.tan(x, name=None)
tf.acos(x, name=None)
tf.asin(x, name=None)
tf.atan(x, name=None)
tf.lgamma(x, name=None)
tf.digamma(x, name=None)
tf.erf(x, name=None)
tf.erfc(x, name=None)
tf.squared_difference(x, y, name=None)
tf.igamma(a, x, name=None)
tf.igammac(a, x, name=None)
tf.zeta(x, q, name=None)
tf.polygamma(a, x, name=None)
tf.betainc(a, b, x, name=None)
tf.rint(x, name=None)
tf.diag(diagonal, name=None)
tf.diag_part(input, name=None)
tf.trace(x, name=None)
tf.transpose(a, perm=None, name='transpose')
tf.eye(num_rows, num_columns=None, batch_shape=None, dtype=tf.float32, name=None)
tf.matrix_diag(diagonal, name=None)
tf.matrix_diag_part(input, name=None)
tf.matrix_band_part(input, num_lower, num_upper, name=None)
tf.matrix_set_diag(input, diagonal, name=None)
tf.matrix_transpose(a, name='matrix_transpose')
tf.matmul(a, b, transpose_a=False, transpose_b=False,adjoint_a=False, adjoint_b=False, a_is_sparse=False,b_is_sparse=False, name=None)
tf.batch_matmul(x, y, adj_x=None, adj_y=None, name=None)
tf.matrix_determinant(input, name=None)
tf.matrix_inverse(input, adjoint=None, name=None)
tf.cholesky(input, name=None)
tf.cholesky_solve(chol, rhs, name=None)
tf.matrix_solve(matrix, rhs, adjoint=None, name=None)
tf.matrix_triangular_solve(matrix, rhs, lower=None, adjoint=None,name=None)
tf.matrix_solve_ls(matrix, rhs, l2_regularizer=0.0, fast=True,name=None)
tf.self_adjoint_eig(tensor, name=None)
tf.self_adjoint_eigvals(tensor, name=None)
tf.svd(tensor, full_matrices=False, compute_uv=True, name=None)
tf.complex(real, imag, name=None)
tf.complex_abs(x, name=None)
tf.conj(x, name=None)
tf.imag(input, name=None)
tf.real(input, name=None)
tf.fft(input, name=None)
tf.ifft(input, name=None)
tf.fft2d(input, name=None)
tf.ifft2d(input, name=None)
tf.fft3d(input, name=None)
tf.ifft3d(input, name=None)
tf.reduce_sum(input_tensor, axis=None, keep_dims=False, name=None,reduction_indices=None)
tf.reduce_prod(input_tensor, axis=None, keep_dims=False,name=None, reduction_indices=None)
tf.reduce_min(input_tensor, axis=None, keep_dims=False, name=None,reduction_indices=None)
tf.reduce_max(input_tensor, axis=None, keep_dims=False, name=None,reduction_indices=None)
tf.reduce_mean(input_tensor, axis=None, keep_dims=False,name=None, reduction_indices=None)
tf.reduce_all(input_tensor, axis=None, keep_dims=False, name=None,reduction_indices=None)
tf.reduce_any(input_tensor, axis=None, keep_dims=False, name=None,reduction_indices=None)
tf.reduce_logsumexp(input_tensor, axis=None, keep_dims=False,name=None, reduction_indices=None)
tf.count_nonzero(input_tensor, axis=None, keep_dims=False,dtype=tf.int64, name=None, reduction_indices=None)
tf.accumulate_n(inputs, shape=None, tensor_dtype=None, name=None)
tf.einsum(equation, *inputs)
tf.cumsum(x, axis=0, exclusive=False, reverse=False,name=None)
tf.cumprod(x, axis=0, exclusive=False, reverse=False,name=None)
tf.segment_sum(data, segment_ids, name=None)
tf.segment_prod(data, segment_ids, name=None)
tf.segment_min(data, segment_ids, name=None)
tf.segment_max(data, segment_ids, name=None)
tf.segment_mean(data, segment_ids, name=None)
tf.unsorted_segment_sum(data, segment_ids,num_segments, name=None)
tf.sparse_segment_sum(data, indices, segment_ids,name=None)
tf.sparse_segment_mean(data, indices, segment_ids,name=None)
tf.sparse_segment_sqrt_n(data, indices, segment_ids,name=None)
tf.argmin(input, axis=None, name=None, dimension=None)
tf.argmax(input, axis=None, name=None, dimension=None)
tf.setdiff1d(x, y, index_dtype=tf.int32, name=None)
tf.where(condition, x=None, y=None, name=None)
tf.unique(x, out_idx=None, name=None)
tf.edit_distance(hypothesis, truth, normalize=True,name='edit_distance')
tf.invert_permutation(x, name=None)
tf.mul(x, y, name=None)
tf.neg(x, name=None)
tf.sub(x, y, name=None)
tf.string_to_hash_bucket_fast(input, num_buckets,name=None)
tf.string_to_hash_bucket_strong(input, num_buckets,key, name=None)
tf.string_to_hash_bucket(string_tensor,num_buckets, name=None)
tf.reduce_join(inputs, reduction_indices, keep_dims=None,separator=None, name=None)
tf.string_join(inputs, separator=None, name=None)
tf.string_split(source, delimiter=' ')
tf.substr(input, pos, len, name=None)
tf.as_string(input, precision=None, scientific=None,shortest=None, width=None, fill=None, name=None)
tf.encode_base64(input, pad=None, name=None)
tf.decode_base64(input, name=None)
tf.histogram_fixed_width(values, value_range, nbins=100, dtype=tf.int32,name=None)
tf.identity(input, name=None)
tf.tuple(tensors, name=None, control_inputs=None)
tf.group(*inputs, **kwargs)
tf.no_op(name=None)
tf.count_up_to(ref, limit, name=None)
tf.cond(pred, fn1, fn2, name=None)
tf.case(pred_fn_pairs, default, exclusive=False, name='case')
tf.while_loop(cond, body, loop_vars, shape_invariants=None,parallel_iterations=10, back_prop=True, swap_memory=False,name=None)
tf.logical_and(x, y, name=None)
tf.logical_not(x, name=None)
tf.logical_or(x, y, name=None)
tf.logical_xor(x, y, name='LogicalXor')
tf.equal(x, y, name=None)
tf.not_equal(x, y, name=None)
tf.less(x, y, name=None)
tf.less_equal(x, y, name=None)
tf.greater(x, y, name=None)
tf.greater_equal(x, y, name=None)
tf.select(condition, t, e, name=None)
tf.where(condition, x=None, y=None, name=None)
tf.is_finite(x, name=None)
tf.is_inf(x, name=None)
tf.is_nan(x, name=None)
tf.verify_tensor_all_finite(t, msg, name=None)
tf.check_numerics(tensor, message, name=None)
tf.add_check_numerics_ops()
tf.Assert(condition, data, summarize=None, name=None)
tf.Print(input_, data, message=None, first_n=None,summarize=None, name=None)
tf.map_fn(fn, elems, dtype=None, parallel_iterations=10,back_prop=True, swap_memory=False, infer_shape=True, name=None)
tf.foldl(fn, elems, initializer=None, parallel_iterations=10,back_prop=True, swap_memory=False, name=None)
tf.foldr(fn, elems, initializer=None, parallel_iterations=10,back_prop=True, swap_memory=False, name=None)
tf.scan(fn, elems, initializer=None, parallel_iterations=10,back_prop=True, swap_memory=False, infer_shape=True, name=None)
class tf.TensorArray
tf.TensorArray.handle
tf.TensorArray.flow
tf.TensorArray.read(index, name=None)
tf.TensorArray.gather(indices, name=None)
tf.TensorArray.pack(name=None)
tf.TensorArray.concat(name=None)
tf.TensorArray.write(index, value, name=None)
tf.TensorArray.scatter(indices, value, name=None)
tf.TensorArray.unpack(value, name=None)
tf.TensorArray.split(value, lengths, name=None)
tf.TensorArray.grad(source, flow=None, name=None)
tf.TensorArray.__init__(dtype, size=None, dynamic_size=None,clear_after_read=None, tensor_array_name=None, handle=None, flow=None,infer_shape=True, name=None)
tf.TensorArray.close(name=None)
tf.TensorArray.dtype
tf.TensorArray.size(name=None)
tf.get_session_handle(data, name=None)
tf.get_session_tensor(handle, dtype, name=None)
tf.delete_session_tensor(handle, name=None)
tf.image.decode_gif(contents, name=None)
tf.image.decode_jpeg(contents, channels=None, ratio=None,fancy_upscaling=None, try_recover_truncated=None,acceptable_fraction=None, name=None)
tf.image.encode_jpeg(image, format=None, quality=None, progressive=None,optimize_size=None, chroma_downsampling=None, density_unit=None,x_density=None, y_density=None, xmp_metadata=None, name=None)
tf.image.decode_png(contents, channels=None, dtype=None, name=None)
tf.image.encode_png(image, compression=None, name=None)
tf.image.resize_images(images, size, method=0,align_corners=False)
tf.image.resize_area(images, size, align_corners=None,name=None)
tf.image.resize_bicubic(images, size, align_corners=None,name=None)
tf.image.resize_bilinear(images, size, align_corners=None,name=None)
tf.image.resize_nearest_neighbor(images, size,align_corners=None, name=None)
tf.image.resize_image_with_crop_or_pad(image, target_height,target_width)
tf.image.central_crop(image, central_fraction)
tf.image.pad_to_bounding_box(image, offset_height,offset_width, target_height, target_width)
tf.image.crop_to_bounding_box(image, offset_height,offset_width, target_height, target_width)
tf.image.extract_glimpse(input, size, offsets, centered=None,normalized=None, uniform_noise=None, name=None)
tf.image.crop_and_resize(image, boxes, box_ind, crop_size,method=None, extrapolation_value=None, name=None)
tf.image.flip_up_down(image)
tf.image.random_flip_up_down(image, seed=None)
tf.image.flip_left_right(image)
tf.image.random_flip_left_right(image, seed=None)
tf.image.transpose_image(image)
tf.image.rot90(image, k=1, name=None)
tf.image.rgb_to_grayscale(images, name=None)
tf.image.grayscale_to_rgb(images, name=None)
tf.image.hsv_to_rgb(images, name=None)
tf.image.rgb_to_hsv(images, name=None)
tf.image.convert_image_dtype(image, dtype, saturate=False,name=None)
tf.image.adjust_brightness(image, delta)
tf.image.random_brightness(image, max_delta, seed=None)
tf.image.adjust_contrast(images, contrast_factor)
tf.image.random_contrast(image, lower, upper, seed=None)
tf.image.adjust_hue(image, delta, name=None)
tf.image.random_hue(image, max_delta, seed=None)
tf.image.adjust_gamma(image, gamma=1, gain=1)
tf.image.adjust_saturation(image, saturation_factor,name=None)
tf.image.random_saturation(image, lower, upper, seed=None)
tf.image.per_image_standardization(image)
tf.image.draw_bounding_boxes(images, boxes, name=None)
tf.image.non_max_suppression(boxes, scores, max_output_size,iou_threshold=None, name=None)
tf.image.sample_distorted_bounding_box(image_size, bounding_boxes,seed=None, seed2=None, min_object_covered=None, aspect_ratio_range=None,area_range=None, max_attempts=None, use_image_if_no_bounding_boxes=None,name=None)
class tf.SparseTensor
tf.SparseTensor.__init__(indices, values, shape)
tf.SparseTensor.get_shape()
tf.SparseTensor.indices
tf.SparseTensor.values
tf.SparseTensor.shape
tf.SparseTensor.dtype
tf.SparseTensor.op
tf.SparseTensor.graph
tf.SparseTensor.__div__(sp_x, y)
tf.SparseTensor.__mul__(sp_x, y)
tf.SparseTensor.__str__()
tf.SparseTensor.__truediv__(sp_x, y)
tf.SparseTensor.eval(feed_dict=None, session=None)
tf.SparseTensor.from_value(cls, sparse_tensor_value)
class tf.SparseTensorValue
tf.SparseTensorValue.__getnewargs__()
tf.SparseTensorValue.__getstate__()
tf.SparseTensorValue.__new__(_cls, indices, values,shape)
tf.SparseTensorValue.__repr__()
tf.SparseTensorValue.indices
tf.SparseTensorValue.shape
tf.SparseTensorValue.values
tf.sparse_to_dense(sparse_indices, output_shape, sparse_values,default_value=0, validate_indices=True, name=None)
tf.sparse_tensor_to_dense(sp_input, default_value=0,validate_indices=True, name=None)
tf.sparse_to_indicator(sp_input, vocab_size, name=None)
tf.sparse_merge(sp_ids, sp_values, vocab_size, name=None,already_sorted=False)
tf.sparse_concat(concat_dim, sp_inputs, name=None,expand_nonconcat_dim=False)
tf.sparse_reorder(sp_input, name=None)
tf.sparse_reshape(sp_input, shape, name=None)
tf.sparse_split(split_dim, num_split, sp_input, name=None)
tf.sparse_retain(sp_input, to_retain)
tf.sparse_reset_shape(sp_input, new_shape=None)
tf.sparse_fill_empty_rows(sp_input, default_value,name=None)
tf.sparse_transpose(sp_input, perm=None, name=None)
tf.sparse_reduce_sum(sp_input, axis=None, keep_dims=False,reduction_axes=None)
tf.sparse_reduce_sum_sparse(sp_input, axis=None,keep_dims=False, reduction_axes=None)
tf.sparse_add(a, b, thresh=0)
tf.sparse_softmax(sp_input, name=None)
tf.sparse_tensor_dense_matmul(sp_a, b, adjoint_a=False,adjoint_b=False, name=None)
tf.sparse_maximum(sp_a, sp_b, name=None)
tf.sparse_minimum(sp_a, sp_b, name=None)
tf.placeholder(dtype, shape=None, name=None)
tf.placeholder_with_default(input, shape,name=None)
tf.sparse_placeholder(dtype, shape=None,name=None)
class tf.ReaderBase
tf.ReaderBase.__init__(reader_ref, supports_serialize=False)
tf.ReaderBase.num_records_produced(name=None)
tf.ReaderBase.num_work_units_completed(name=None)
tf.ReaderBase.read(queue, name=None)
tf.ReaderBase.read_up_to(queue, num_records, name=None)
tf.ReaderBase.reader_ref
tf.ReaderBase.reset(name=None)
tf.ReaderBase.restore_state(state, name=None)
tf.ReaderBase.serialize_state(name=None)
tf.ReaderBase.supports_serialize
class tf.TextLineReader
tf.TextLineReader.__init__(skip_header_lines=None, name=None)
tf.TextLineReader.num_records_produced(name=None)
tf.TextLineReader.num_work_units_completed(name=None)
tf.TextLineReader.read(queue, name=None)
tf.TextLineReader.read_up_to(queue, num_records, name=None)
tf.TextLineReader.reader_ref
tf.TextLineReader.reset(name=None)
tf.TextLineReader.restore_state(state, name=None)
tf.TextLineReader.serialize_state(name=None)
tf.TextLineReader.supports_serialize
class tf.WholeFileReader
tf.WholeFileReader.__init__(name=None)
tf.WholeFileReader.num_records_produced(name=None)
tf.WholeFileReader.num_work_units_completed(name=None)
tf.WholeFileReader.read(queue, name=None)
tf.WholeFileReader.read_up_to(queue, num_records, name=None)
tf.WholeFileReader.reader_ref
tf.WholeFileReader.reset(name=None)
tf.WholeFileReader.restore_state(state, name=None)
tf.WholeFileReader.serialize_state(name=None)
tf.WholeFileReader.supports_serialize
class tf.IdentityReader
tf.IdentityReader.__init__(name=None)
tf.IdentityReader.num_records_produced(name=None)
tf.IdentityReader.num_work_units_completed(name=None)
tf.IdentityReader.read(queue, name=None)
tf.IdentityReader.read_up_to(queue, num_records, name=None)
tf.IdentityReader.reader_ref
tf.IdentityReader.reset(name=None)
tf.IdentityReader.restore_state(state, name=None)
tf.IdentityReader.serialize_state(name=None)
tf.IdentityReader.supports_serialize
class tf.TFRecordReader
tf.TFRecordReader.__init__(name=None, options=None)
tf.TFRecordReader.num_records_produced(name=None)
tf.TFRecordReader.num_work_units_completed(name=None)
tf.TFRecordReader.read(queue, name=None)
tf.TFRecordReader.read_up_to(queue, num_records, name=None)
tf.TFRecordReader.reader_ref
tf.TFRecordReader.reset(name=None)
tf.TFRecordReader.restore_state(state, name=None)
tf.TFRecordReader.serialize_state(name=None)
tf.TFRecordReader.supports_serialize
class tf.FixedLengthRecordReader
tf.FixedLengthRecordReader.__init__(record_bytes,header_bytes=None, footer_bytes=None, name=None)
tf.FixedLengthRecordReader.num_records_produced(name=None)
tf.FixedLengthRecordReader.num_work_units_completed(name=None)
tf.FixedLengthRecordReader.read(queue, name=None)
tf.FixedLengthRecordReader.read_up_to(queue, num_records,name=None)
tf.FixedLengthRecordReader.reader_ref
tf.FixedLengthRecordReader.reset(name=None)
tf.FixedLengthRecordReader.restore_state(state, name=None)
tf.FixedLengthRecordReader.serialize_state(name=None)
tf.FixedLengthRecordReader.supports_serialize
tf.decode_csv(records, record_defaults,field_delim=None, name=None)
tf.decode_raw(bytes, out_type, little_endian=None,name=None)
class tf.VarLenFeature
tf.VarLenFeature.__getnewargs__()
tf.VarLenFeature.__getstate__()
tf.VarLenFeature.__new__(_cls, dtype)
tf.VarLenFeature.__repr__()
tf.VarLenFeature.dtype
class tf.FixedLenFeature
tf.FixedLenFeature.__getnewargs__()
tf.FixedLenFeature.__getstate__()
tf.FixedLenFeature.__new__(_cls, shape, dtype,default_value=None)
tf.FixedLenFeature.__repr__()
tf.FixedLenFeature.default_value
tf.FixedLenFeature.dtype
tf.FixedLenFeature.shape
class tf.FixedLenSequenceFeature
tf.FixedLenSequenceFeature.__getnewargs__()
tf.FixedLenSequenceFeature.__getstate__()
tf.FixedLenSequenceFeature.__new__(_cls, shape, dtype,allow_missing=False)
tf.FixedLenSequenceFeature.__repr__()
tf.FixedLenSequenceFeature.allow_missing
tf.FixedLenSequenceFeature.dtype
tf.FixedLenSequenceFeature.shape
tf.parse_example(serialized, features, name=None,example_names=None)
tf.parse_single_example(serialized, features,name=None, example_names=None)
tf.parse_tensor(serialized, out_type, name=None)
tf.decode_json_example(json_examples, name=None)
class tf.QueueBase
tf.QueueBase.enqueue(vals, name=None)
tf.QueueBase.enqueue_many(vals, name=None)
tf.QueueBase.dequeue(name=None)
tf.QueueBase.dequeue_many(n, name=None)
tf.QueueBase.size(name=None)
tf.QueueBase.close(cancel_pending_enqueues=False, name=None)
tf.QueueBase.__init__(dtypes, shapes, names, queue_ref)
tf.QueueBase.dequeue_up_to(n, name=None)
tf.QueueBase.dtypes
tf.QueueBase.from_list(index, queues)
tf.QueueBase.name
tf.QueueBase.names
tf.QueueBase.queue_ref
tf.QueueBase.shapes
class tf.FIFOQueue
tf.FIFOQueue.__init__(capacity, dtypes, shapes=None, names=None,shared_name=None, name='fifo_queue')
class tf.PaddingFIFOQueue
tf.PaddingFIFOQueue.__init__(capacity, dtypes, shapes, names=None,shared_name=None, name='padding_fifo_queue')
class tf.RandomShuffleQueue
tf.RandomShuffleQueue.__init__(capacity, min_after_dequeue, dtypes,shapes=None, names=None, seed=None, shared_name=None,name='random_shuffle_queue')
class tf.PriorityQueue
tf.PriorityQueue.__init__(capacity, types, shapes=None, names=None,shared_name=None, name='priority_queue')
class tf.ConditionalAccumulatorBase
tf.ConditionalAccumulatorBase.__init__(dtype, shape,accumulator_ref)
tf.ConditionalAccumulatorBase.accumulator_ref
tf.ConditionalAccumulatorBase.dtype
tf.ConditionalAccumulatorBase.name
tf.ConditionalAccumulatorBase.num_accumulated(name=None)
tf.ConditionalAccumulatorBase.set_global_step(new_global_step,name=None)
class tf.ConditionalAccumulator
tf.ConditionalAccumulator.__init__(dtype, shape=None,shared_name=None, name='conditional_accumulator')
tf.ConditionalAccumulator.accumulator_ref
tf.ConditionalAccumulator.apply_grad(grad, local_step=0, name=None)
tf.ConditionalAccumulator.dtype
tf.ConditionalAccumulator.name
tf.ConditionalAccumulator.num_accumulated(name=None)
tf.ConditionalAccumulator.set_global_step(new_global_step,name=None)
tf.ConditionalAccumulator.take_grad(num_required, name=None)
class tf.SparseConditionalAccumulator
tf.SparseConditionalAccumulator.__init__(dtype, shape=None,shared_name=None, name='sparse_conditional_accumulator')
tf.SparseConditionalAccumulator.accumulator_ref
tf.SparseConditionalAccumulator.apply_grad(grad_indices,grad_values, grad_shape=None, local_step=0, name=None)
tf.SparseConditionalAccumulator.apply_indexed_slices_grad(grad,local_step=0, name=None)
tf.SparseConditionalAccumulator.dtype
tf.SparseConditionalAccumulator.name
tf.SparseConditionalAccumulator.num_accumulated(name=None)
tf.SparseConditionalAccumulator.set_global_step(new_global_step,name=None)
tf.SparseConditionalAccumulator.take_grad(num_required, name=None)
tf.SparseConditionalAccumulator.take_indexed_slices_grad(num_required, name=None)
tf.matching_files(pattern, name=None)
tf.read_file(filename, name=None)
tf.write_file(filename, contents, name=None)
tf.train.match_filenames_once(pattern, name=None)
tf.train.limit_epochs(tensor, num_epochs=None, name=None)
tf.train.input_producer(input_tensor, element_shape=None, num_epochs=None,shuffle=True, seed=None, capacity=32, shared_name=None, summary_name=None,name=None, cancel_op=None)
tf.train.range_input_producer(limit, num_epochs=None, shuffle=True,seed=None, capacity=32, shared_name=None, name=None)
tf.train.slice_input_producer(tensor_list, num_epochs=None, shuffle=True,seed=None, capacity=32, shared_name=None, name=None)
tf.train.string_input_producer(string_tensor, num_epochs=None,shuffle=True, seed=None, capacity=32, shared_name=None, name=None,cancel_op=None)
tf.train.batch(tensors, batch_size, num_threads=1, capacity=32,enqueue_many=False, shapes=None, dynamic_pad=False,allow_smaller_final_batch=False, shared_name=None, name=None)
tf.train.batch_join(tensors_list, batch_size, capacity=32,enqueue_many=False, shapes=None, dynamic_pad=False,allow_smaller_final_batch=False, shared_name=None, name=None)
tf.train.shuffle_batch(tensors, batch_size, capacity, min_after_dequeue,num_threads=1, seed=None, enqueue_many=False, shapes=None,allow_smaller_final_batch=False, shared_name=None, name=None)
tf.train.shuffle_batch_join(tensors_list, batch_size, capacity,min_after_dequeue, seed=None, enqueue_many=False, shapes=None,allow_smaller_final_batch=False, shared_name=None, name=None)
class tf.python_io.TFRecordWriter
tf.python_io.TFRecordWriter.__init__(path, options=None)
tf.python_io.TFRecordWriter.write(record)
tf.python_io.TFRecordWriter.close()
tf.python_io.TFRecordWriter.__enter__()
tf.python_io.TFRecordWriter.__exit__(unused_type, unused_value,unused_traceback)
tf.python_io.tf_record_iterator(path, options=None)
class tf.python_io.TFRecordCompressionType
class tf.python_io.TFRecordOptions
tf.python_io.TFRecordOptions.__init__(compression_type)
tf.python_io.TFRecordOptions.get_compression_type_string(cls,options)
tf.nn.relu(features, name=None)
tf.nn.relu6(features, name=None)
tf.nn.crelu(features, name=None)
tf.nn.elu(features, name=None)
tf.nn.softplus(features, name=None)
tf.nn.softsign(features, name=None)
tf.nn.dropout(x, keep_prob, noise_shape=None,seed=None, name=None)
tf.nn.bias_add(value, bias, data_format=None,name=None)
tf.sigmoid(x, name=None)
tf.tanh(x, name=None)
tf.nn.convolution(input, filter, padding, strides=None,dilation_rate=None, name=None, data_format=None)
tf.nn.conv2d(input, filter, strides, padding,use_cudnn_on_gpu=None, data_format=None, name=None)
tf.nn.depthwise_conv2d(input, filter, strides, padding,name=None)
tf.nn.separable_conv2d(input, depthwise_filter, pointwise_filter,strides, padding, name=None)
tf.nn.atrous_conv2d(value, filters, rate, padding, name=None)
tf.nn.conv2d_transpose(value, filter, output_shape, strides,padding='SAME', data_format='NHWC', name=None)
tf.nn.conv1d(value, filters, stride, padding,use_cudnn_on_gpu=None, data_format=None, name=None)
tf.nn.conv3d(input, filter, strides, padding, name=None)
tf.nn.conv3d_transpose(value, filter, output_shape, strides,padding='SAME', name=None)
tf.nn.avg_pool(value, ksize, strides, padding, data_format='NHWC',name=None)
tf.nn.max_pool(value, ksize, strides, padding, data_format='NHWC',name=None)
tf.nn.max_pool_with_argmax(input, ksize, strides, padding,Targmax=None, name=None)
tf.nn.avg_pool3d(input, ksize, strides, padding, name=None)
tf.nn.max_pool3d(input, ksize, strides, padding, name=None)
tf.nn.fractional_avg_pool(value, pooling_ratio, pseudo_random=None,overlapping=None, deterministic=None, seed=None, seed2=None,name=None)
tf.nn.fractional_max_pool(value, pooling_ratio, pseudo_random=None,overlapping=None, deterministic=None, seed=None, seed2=None,name=None)
tf.nn.pool(input, window_shape, pooling_type, padding,dilation_rate=None, strides=None, name=None, data_format=None)
tf.nn.dilation2d(input, filter, strides, rates,padding, name=None)
tf.nn.erosion2d(value, kernel, strides, rates, padding,name=None)
tf.nn.l2_normalize(x, dim, epsilon=1e-12, name=None)
tf.nn.local_response_normalization(input, depth_radius=None,bias=None, alpha=None, beta=None, name=None)
tf.nn.sufficient_statistics(x, axes, shift=None, keep_dims=False,name=None)
tf.nn.normalize_moments(counts, mean_ss, variance_ss, shift,name=None)
tf.nn.moments(x, axes, shift=None, name=None, keep_dims=False)
tf.nn.weighted_moments(x, axes, frequency_weights, name=None,keep_dims=False)
tf.nn.l2_loss(t, name=None)
tf.nn.log_poisson_loss(log_input, targets, compute_full_loss=False,name=None)
tf.nn.sigmoid_cross_entropy_with_logits(logits, targets,name=None)
tf.nn.softmax(logits, dim=-1, name=None)
tf.nn.log_softmax(logits, dim=-1, name=None)
tf.nn.softmax_cross_entropy_with_logits(logits, labels,dim=-1, name=None)
tf.nn.sparse_softmax_cross_entropy_with_logits(logits,labels, name=None)
tf.nn.weighted_cross_entropy_with_logits(logits, targets,pos_weight, name=None)
tf.nn.embedding_lookup(params, ids, partition_strategy='mod', name=None,validate_indices=True, max_norm=None)
tf.nn.embedding_lookup_sparse(params, sp_ids, sp_weights,partition_strategy='mod', name=None, combiner=None, max_norm=None)
tf.nn.dynamic_rnn(cell, inputs, sequence_length=None, initial_state=None,dtype=None, parallel_iterations=None, swap_memory=False, time_major=False,scope=None)
tf.nn.rnn(cell, inputs, initial_state=None, dtype=None,sequence_length=None, scope=None)
tf.nn.state_saving_rnn(cell, inputs, state_saver, state_name,sequence_length=None, scope=None)
tf.nn.bidirectional_dynamic_rnn(cell_fw, cell_bw, inputs,sequence_length=None, initial_state_fw=None, initial_state_bw=None,dtype=None, parallel_iterations=None, swap_memory=False, time_major=False,scope=None)
tf.nn.bidirectional_rnn(cell_fw, cell_bw, inputs, initial_state_fw=None,initial_state_bw=None, dtype=None, sequence_length=None, scope=None)
tf.nn.raw_rnn(cell, loop_fn, parallel_iterations=None, swap_memory=False,scope=None)
tf.nn.ctc_loss(inputs, labels, sequence_length,preprocess_collapse_repeated=False, ctc_merge_repeated=True,time_major=True)
tf.nn.ctc_greedy_decoder(inputs, sequence_length, merge_repeated=True)
tf.nn.ctc_beam_search_decoder(inputs, sequence_length, beam_width=100,top_paths=1, merge_repeated=True)
tf.nn.top_k(input, k=1, sorted=True, name=None)
tf.nn.in_top_k(predictions, targets, k,name=None)
tf.nn.nce_loss(weights, biases, inputs, labels, num_sampled, num_classes,num_true=1, sampled_values=None, remove_accidental_hits=False,partition_strategy='mod', name='nce_loss')
tf.nn.sampled_softmax_loss(weights, biases, inputs, labels, num_sampled,num_classes, num_true=1, sampled_values=None, remove_accidental_hits=True,partition_strategy='mod', name='sampled_softmax_loss')
tf.nn.uniform_candidate_sampler(true_classes, num_true, num_sampled,unique, range_max, seed=None, name=None)
tf.nn.log_uniform_candidate_sampler(true_classes, num_true, num_sampled,unique, range_max, seed=None, name=None)
tf.nn.learned_unigram_candidate_sampler(true_classes, num_true,num_sampled, unique, range_max, seed=None, name=None)
tf.nn.fixed_unigram_candidate_sampler(true_classes, num_true, num_sampled,unique, range_max, vocab_file='', distortion=1.0, num_reserved_ids=0,num_shards=1, shard=0, unigrams=(), seed=None, name=None)
tf.nn.compute_accidental_hits(true_classes, sampled_candidates, num_true,seed=None, name=None)
tf.nn.quantized_relu_x(features, max_value, min_features, max_features,out_type=None, name=None)
tf.nn.quantized_max_pool(input, min_input, max_input, ksize, strides,padding, name=None)
tf.nn.quantized_avg_pool(input, min_input, max_input, ksize, strides,padding, name=None)
tf.nn.batch_normalization(x, mean, variance, offset, scale,variance_epsilon, name=None)
tf.nn.depthwise_conv2d_native(input, filter, strides,padding, name=None)
class tf.nn.rnn_cell.RNNCell
tf.nn.rnn_cell.RNNCell.__call__(inputs, state,scope=None)
tf.nn.rnn_cell.RNNCell.output_size
tf.nn.rnn_cell.RNNCell.state_size
tf.nn.rnn_cell.RNNCell.zero_state(batch_size, dtype)
class tf.nn.rnn_cell.BasicRNNCell
tf.nn.rnn_cell.BasicRNNCell.__call__(inputs, state, scope=None)
tf.nn.rnn_cell.BasicRNNCell.__init__(num_units, input_size=None,activation=tanh)
tf.nn.rnn_cell.BasicRNNCell.output_size
tf.nn.rnn_cell.BasicRNNCell.state_size
tf.nn.rnn_cell.BasicRNNCell.zero_state(batch_size, dtype)
class tf.nn.rnn_cell.BasicLSTMCell
tf.nn.rnn_cell.BasicLSTMCell.__call__(inputs, state, scope=None)
tf.nn.rnn_cell.BasicLSTMCell.__init__(num_units, forget_bias=1.0,input_size=None, state_is_tuple=True, activation=tanh)
tf.nn.rnn_cell.BasicLSTMCell.output_size
tf.nn.rnn_cell.BasicLSTMCell.state_size
tf.nn.rnn_cell.BasicLSTMCell.zero_state(batch_size, dtype)
class tf.nn.rnn_cell.GRUCell
tf.nn.rnn_cell.GRUCell.__call__(inputs, state, scope=None)
tf.nn.rnn_cell.GRUCell.__init__(num_units, input_size=None,activation=tanh)
tf.nn.rnn_cell.GRUCell.output_size
tf.nn.rnn_cell.GRUCell.state_size
tf.nn.rnn_cell.GRUCell.zero_state(batch_size, dtype)
class tf.nn.rnn_cell.LSTMCell
tf.nn.rnn_cell.LSTMCell.__call__(inputs, state, scope=None)
tf.nn.rnn_cell.LSTMCell.__init__(num_units, input_size=None,use_peepholes=False, cell_clip=None, initializer=None, num_proj=None,proj_clip=None, num_unit_shards=1, num_proj_shards=1, forget_bias=1.0,state_is_tuple=True, activation=tanh)
tf.nn.rnn_cell.LSTMCell.output_size
tf.nn.rnn_cell.LSTMCell.state_size
tf.nn.rnn_cell.LSTMCell.zero_state(batch_size, dtype)
class tf.nn.rnn_cell.LSTMStateTuple
tf.nn.rnn_cell.LSTMStateTuple.__getnewargs__()
tf.nn.rnn_cell.LSTMStateTuple.__getstate__()
tf.nn.rnn_cell.LSTMStateTuple.__new__(_cls, c,h)
tf.nn.rnn_cell.LSTMStateTuple.__repr__()
tf.nn.rnn_cell.LSTMStateTuple.c
tf.nn.rnn_cell.LSTMStateTuple.dtype
tf.nn.rnn_cell.LSTMStateTuple.h
class tf.nn.rnn_cell.MultiRNNCell
tf.nn.rnn_cell.MultiRNNCell.__call__(inputs, state, scope=None)
tf.nn.rnn_cell.MultiRNNCell.__init__(cells, state_is_tuple=True)
tf.nn.rnn_cell.MultiRNNCell.output_size
tf.nn.rnn_cell.MultiRNNCell.state_size
tf.nn.rnn_cell.MultiRNNCell.zero_state(batch_size, dtype)
class tf.nn.rnn_cell.DropoutWrapper
tf.nn.rnn_cell.DropoutWrapper.__call__(inputs, state, scope=None)
tf.nn.rnn_cell.DropoutWrapper.__init__(cell, input_keep_prob=1.0,output_keep_prob=1.0, seed=None)
tf.nn.rnn_cell.DropoutWrapper.output_size
tf.nn.rnn_cell.DropoutWrapper.state_size
tf.nn.rnn_cell.DropoutWrapper.zero_state(batch_size, dtype)
class tf.nn.rnn_cell.EmbeddingWrapper
tf.nn.rnn_cell.EmbeddingWrapper.__call__(inputs, state,scope=None)
tf.nn.rnn_cell.EmbeddingWrapper.__init__(cell, embedding_classes,embedding_size, initializer=None)
tf.nn.rnn_cell.EmbeddingWrapper.output_size
tf.nn.rnn_cell.EmbeddingWrapper.state_size
tf.nn.rnn_cell.EmbeddingWrapper.zero_state(batch_size, dtype)
class tf.nn.rnn_cell.InputProjectionWrapper
tf.nn.rnn_cell.InputProjectionWrapper.__call__(inputs, state,scope=None)
tf.nn.rnn_cell.InputProjectionWrapper.__init__(cell, num_proj,input_size=None)
tf.nn.rnn_cell.InputProjectionWrapper.output_size
tf.nn.rnn_cell.InputProjectionWrapper.state_size
tf.nn.rnn_cell.InputProjectionWrapper.zero_state(batch_size,dtype)
class tf.nn.rnn_cell.OutputProjectionWrapper
tf.nn.rnn_cell.OutputProjectionWrapper.__call__(inputs, state,scope=None)
tf.nn.rnn_cell.OutputProjectionWrapper.__init__(cell,output_size)
tf.nn.rnn_cell.OutputProjectionWrapper.output_size
tf.nn.rnn_cell.OutputProjectionWrapper.state_size
tf.nn.rnn_cell.OutputProjectionWrapper.zero_state(batch_size,dtype)
class tf.Session
tf.Session.__init__(target='', graph=None, config=None)
tf.Session.run(fetches, feed_dict=None, options=None,run_metadata=None)
tf.Session.close()
tf.Session.graph
tf.Session.as_default()
tf.Session.reset(target, containers=None, config=None)
tf.Session.__enter__()
tf.Session.__exit__(exec_type, exec_value, exec_tb)
class tf.InteractiveSession
tf.InteractiveSession.__init__(target='', graph=None,config=None)
tf.InteractiveSession.close()
tf.get_default_session()
class tf.OpError
tf.OpError.op
tf.OpError.node_def
tf.OpError.__init__(node_def, op, message, error_code)
tf.OpError.__str__()
tf.OpError.error_code
tf.OpError.message
class tf.errors.CancelledError
tf.errors.CancelledError.__init__(node_def, op,message)
class tf.errors.UnknownError
tf.errors.UnknownError.__init__(node_def, op, message,error_code=2)
class tf.errors.InvalidArgumentError
tf.errors.InvalidArgumentError.__init__(node_def, op,message)
class tf.errors.DeadlineExceededError
tf.errors.DeadlineExceededError.__init__(node_def, op,message)
class tf.errors.NotFoundError
tf.errors.NotFoundError.__init__(node_def, op,message)
class tf.errors.AlreadyExistsError
tf.errors.AlreadyExistsError.__init__(node_def, op,message)
class tf.errors.PermissionDeniedError
tf.errors.PermissionDeniedError.__init__(node_def, op,message)
class tf.errors.UnauthenticatedError
tf.errors.UnauthenticatedError.__init__(node_def, op,message)
class tf.errors.ResourceExhaustedError
tf.errors.ResourceExhaustedError.__init__(node_def,op, message)
class tf.errors.FailedPreconditionError
tf.errors.FailedPreconditionError.__init__(node_def,op, message)
class tf.errors.AbortedError
tf.errors.AbortedError.__init__(node_def, op, message)
class tf.errors.OutOfRangeError
tf.errors.OutOfRangeError.__init__(node_def, op,message)
class tf.errors.UnimplementedError
tf.errors.UnimplementedError.__init__(node_def, op,message)
class tf.errors.InternalError
tf.errors.InternalError.__init__(node_def, op,message)
class tf.errors.UnavailableError
tf.errors.UnavailableError.__init__(node_def, op,message)
class tf.errors.DataLossError
tf.errors.DataLossError.__init__(node_def, op,message)
tf.errors.exception_type_from_error_code(error_code)
tf.errors.error_code_from_exception_type(cls)
tf.errors.raise_exception_on_not_ok_status()
class tf.train.Optimizer
tf.train.Optimizer.__init__(use_locking, name)
tf.train.Optimizer.minimize(loss, global_step=None, var_list=None,gate_gradients=1, aggregation_method=None,colocate_gradients_with_ops=False, name=None, grad_loss=None)
tf.train.Optimizer.compute_gradients(loss, var_list=None,gate_gradients=1, aggregation_method=None,colocate_gradients_with_ops=False, grad_loss=None)
tf.train.Optimizer.apply_gradients(grads_and_vars, global_step=None,name=None)
tf.train.Optimizer.get_slot_names()
tf.train.Optimizer.get_slot(var, name)
tf.train.Optimizer.get_name()
class tf.train.GradientDescentOptimizer
tf.train.GradientDescentOptimizer.__init__(learning_rate,use_locking=False, name='GradientDescent')
class tf.train.AdadeltaOptimizer
tf.train.AdadeltaOptimizer.__init__(learning_rate=0.001, rho=0.95,epsilon=1e-08, use_locking=False, name='Adadelta')
class tf.train.AdagradOptimizer
tf.train.AdagradOptimizer.__init__(learning_rate,initial_accumulator_value=0.1, use_locking=False, name='Adagrad')
class tf.train.AdagradDAOptimizer
tf.train.AdagradDAOptimizer.__init__(learning_rate, global_step,initial_gradient_squared_accumulator_value=0.1,l1_regularization_strength=0.0, l2_regularization_strength=0.0,use_locking=False, name='AdagradDA')
class tf.train.MomentumOptimizer
tf.train.MomentumOptimizer.__init__(learning_rate, momentum,use_locking=False, name='Momentum', use_nesterov=False)
class tf.train.AdamOptimizer
tf.train.AdamOptimizer.__init__(learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, use_locking=False, name='Adam')
class tf.train.FtrlOptimizer
tf.train.FtrlOptimizer.__init__(learning_rate, learning_rate_power=-0.5,initial_accumulator_value=0.1, l1_regularization_strength=0.0,l2_regularization_strength=0.0, use_locking=False, name='Ftrl')
class tf.train.ProximalGradientDescentOptimizer
tf.train.ProximalGradientDescentOptimizer.__init__(learning_rate,l1_regularization_strength=0.0, l2_regularization_strength=0.0,use_locking=False, name='ProximalGradientDescent')
class tf.train.ProximalAdagradOptimizer
tf.train.ProximalAdagradOptimizer.__init__(learning_rate,initial_accumulator_value=0.1, l1_regularization_strength=0.0,l2_regularization_strength=0.0, use_locking=False, name='ProximalAdagrad')
class tf.train.RMSPropOptimizer
tf.train.RMSPropOptimizer.__init__(learning_rate, decay=0.9, momentum=0.0,epsilon=1e-10, use_locking=False, centered=False, name='RMSProp')
tf.gradients(ys, xs, grad_ys=None, name='gradients',colocate_gradients_with_ops=False, gate_gradients=False,aggregation_method=None)
class tf.AggregationMethod
tf.stop_gradient(input, name=None)
tf.hessians(ys, xs, name='hessians', colocate_gradients_with_ops=False,gate_gradients=False, aggregation_method=None)
tf.clip_by_value(t, clip_value_min, clip_value_max,name=None)
tf.clip_by_norm(t, clip_norm, axes=None, name=None)
tf.clip_by_average_norm(t, clip_norm, name=None)
tf.clip_by_global_norm(t_list, clip_norm,use_norm=None, name=None)
tf.global_norm(t_list, name=None)
tf.train.exponential_decay(learning_rate, global_step, decay_steps,decay_rate, staircase=False, name=None)
tf.train.inverse_time_decay(learning_rate, global_step, decay_steps,decay_rate, staircase=False, name=None)
tf.train.natural_exp_decay(learning_rate, global_step, decay_steps,decay_rate, staircase=False, name=None)
tf.train.piecewise_constant(x, boundaries, values, name=None)
tf.train.polynomial_decay(learning_rate, global_step, decay_steps,end_learning_rate=0.0001, power=1.0, cycle=False, name=None)
class tf.train.ExponentialMovingAverage
tf.train.ExponentialMovingAverage.__init__(decay,num_updates=None, name='ExponentialMovingAverage')
tf.train.ExponentialMovingAverage.apply(var_list=None)
tf.train.ExponentialMovingAverage.average_name(var)
tf.train.ExponentialMovingAverage.average(var)
tf.train.ExponentialMovingAverage.variables_to_restore(moving_avg_variables=None)
class tf.train.Coordinator
tf.train.Coordinator.__init__(clean_stop_exception_types=None)
tf.train.Coordinator.clear_stop()
tf.train.Coordinator.join(threads=None, stop_grace_period_secs=120)
tf.train.Coordinator.joined
tf.train.Coordinator.raise_requested_exception()
tf.train.Coordinator.register_thread(thread)
tf.train.Coordinator.request_stop(ex=None)
tf.train.Coordinator.should_stop()
tf.train.Coordinator.stop_on_exception()
tf.train.Coordinator.wait_for_stop(timeout=None)
class tf.train.QueueRunner
tf.train.QueueRunner.__init__(queue=None, enqueue_ops=None, close_op=None,cancel_op=None, queue_closed_exception_types=None, queue_runner_def=None,import_scope=None)
tf.train.QueueRunner.cancel_op
tf.train.QueueRunner.close_op
tf.train.QueueRunner.create_threads(sess, coord=None, daemon=False,start=False)
tf.train.QueueRunner.enqueue_ops
tf.train.QueueRunner.exceptions_raised
tf.train.QueueRunner.from_proto(queue_runner_def, import_scope=None)
tf.train.QueueRunner.name
tf.train.QueueRunner.queue
tf.train.QueueRunner.queue_closed_exception_types
tf.train.QueueRunner.to_proto(export_scope=None)
tf.train.add_queue_runner(qr, collection='queue_runners')
tf.train.start_queue_runners(sess=None, coord=None, daemon=True,start=True, collection='queue_runners')
class tf.train.Server
tf.train.Server.__init__(server_or_cluster_def, job_name=None,task_index=None, protocol=None, config=None, start=True)
tf.train.Server.create_local_server(config=None, start=True)
tf.train.Server.target
tf.train.Server.server_def
tf.train.Server.start()
tf.train.Server.join()
class tf.train.Supervisor
tf.train.Supervisor.__init__(graph=None, ready_op=0,ready_for_local_init_op=0, is_chief=True, init_op=0, init_feed_dict=None,local_init_op=0, logdir=None, summary_op=0, saver=0, global_step=0,save_summaries_secs=120, save_model_secs=600, recovery_wait_secs=30,stop_grace_secs=120, checkpoint_basename='model.ckpt',session_manager=None, summary_writer=0, init_fn=None)
tf.train.Supervisor.managed_session(master='', config=None,start_standard_services=True, close_summary_writer=True)
tf.train.Supervisor.prepare_or_wait_for_session(master='', config=None,wait_for_checkpoint=False, max_wait_secs=7200,start_standard_services=True)
tf.train.Supervisor.start_standard_services(sess)
tf.train.Supervisor.start_queue_runners(sess, queue_runners=None)
tf.train.Supervisor.summary_computed(sess, summary, global_step=None)
tf.train.Supervisor.stop(threads=None, close_summary_writer=True)
tf.train.Supervisor.request_stop(ex=None)
tf.train.Supervisor.should_stop()
tf.train.Supervisor.stop_on_exception()
tf.train.Supervisor.wait_for_stop()
tf.train.Supervisor.Loop(timer_interval_secs, target, args=None,kwargs=None)
tf.train.Supervisor.PrepareSession(master='', config=None,wait_for_checkpoint=False, max_wait_secs=7200,start_standard_services=True)
tf.train.Supervisor.RequestStop(ex=None)
tf.train.Supervisor.ShouldStop()
tf.train.Supervisor.StartQueueRunners(sess, queue_runners=None)
tf.train.Supervisor.StartStandardServices(sess)
tf.train.Supervisor.Stop(threads=None, close_summary_writer=True)
tf.train.Supervisor.StopOnException()
tf.train.Supervisor.SummaryComputed(sess, summary, global_step=None)
tf.train.Supervisor.WaitForStop()
tf.train.Supervisor.coord
tf.train.Supervisor.global_step
tf.train.Supervisor.init_feed_dict
tf.train.Supervisor.init_op
tf.train.Supervisor.is_chief
tf.train.Supervisor.loop(timer_interval_secs, target, args=None,kwargs=None)
tf.train.Supervisor.ready_for_local_init_op
tf.train.Supervisor.ready_op
tf.train.Supervisor.save_model_secs
tf.train.Supervisor.save_path
tf.train.Supervisor.save_summaries_secs
tf.train.Supervisor.saver
tf.train.Supervisor.session_manager
tf.train.Supervisor.summary_op
tf.train.Supervisor.summary_writer
class tf.train.SessionManager
tf.train.SessionManager.__init__(local_init_op=None, ready_op=None,ready_for_local_init_op=None, graph=None, recovery_wait_secs=30)
tf.train.SessionManager.prepare_session(master, init_op=None, saver=None,checkpoint_dir=None, wait_for_checkpoint=False, max_wait_secs=7200,config=None, init_feed_dict=None, init_fn=None)
tf.train.SessionManager.recover_session(master, saver=None,checkpoint_dir=None, wait_for_checkpoint=False, max_wait_secs=7200,config=None)
tf.train.SessionManager.wait_for_session(master, config=None,max_wait_secs=inf)
class tf.train.ClusterSpec
tf.train.ClusterSpec.as_cluster_def()
tf.train.ClusterSpec.as_dict()
tf.train.ClusterSpec.__bool__()
tf.train.ClusterSpec.__eq__(other)
tf.train.ClusterSpec.__init__(cluster)
tf.train.ClusterSpec.__ne__(other)
tf.train.ClusterSpec.__nonzero__()
tf.train.ClusterSpec.job_tasks(job_name)
tf.train.ClusterSpec.jobs
tf.train.ClusterSpec.num_tasks(job_name)
tf.train.ClusterSpec.task_address(job_name, task_index)
tf.train.ClusterSpec.task_indices(job_name)
tf.train.replica_device_setter(ps_tasks=0, ps_device='/job:ps',worker_device='/job:worker', merge_devices=True, cluster=None,ps_ops=None, ps_strategy=None)
class tf.train.Scaffold
tf.train.Scaffold.__init__(init_op=None, init_feed_dict=None,init_fn=None, ready_op=None, local_init_op=None, summary_op=None,saver=None)
tf.train.Scaffold.finalize()
tf.train.Scaffold.get_or_default(arg_name, collection_key,default_constructor)
tf.train.Scaffold.init_feed_dict
tf.train.Scaffold.init_fn
tf.train.Scaffold.init_op
tf.train.Scaffold.local_init_op
tf.train.Scaffold.ready_op
tf.train.Scaffold.saver
tf.train.Scaffold.summary_op
tf.train.MonitoredTrainingSession(master='', is_chief=True,checkpoint_dir=None, scaffold=None, hooks=None, chief_only_hooks=None,save_checkpoint_secs=600, save_summaries_steps=100, config=None)
class tf.train.SessionCreator
tf.train.SessionCreator.create_session()
class tf.train.ChiefSessionCreator
tf.train.ChiefSessionCreator.__init__(scaffold=None, master='',config=None, checkpoint_dir=None)
tf.train.ChiefSessionCreator.create_session()
class tf.train.WorkerSessionCreator
tf.train.WorkerSessionCreator.__init__(scaffold=None, master='',config=None)
tf.train.WorkerSessionCreator.create_session()
class tf.train.MonitoredSession
tf.train.MonitoredSession.__enter__()
tf.train.MonitoredSession.__exit__(exception_type, exception_value,traceback)
tf.train.MonitoredSession.__init__(session_creator=None, hooks=None)
tf.train.MonitoredSession.close()
tf.train.MonitoredSession.graph
tf.train.MonitoredSession.run(fetches, feed_dict=None, options=None,run_metadata=None)
tf.train.MonitoredSession.should_stop()
tf.scalar_summary(*args, **kwargs)
tf.image_summary(*args, **kwargs)
tf.audio_summary(*args, **kwargs)
tf.histogram_summary(*args, **kwargs)
tf.nn.zero_fraction(value, name=None)
tf.merge_summary(*args, **kwargs)
tf.merge_all_summaries(*args, **kwargs)
class tf.train.SummaryWriter
tf.train.SummaryWriter.__init__(*args, **kwargs)
tf.train.SummaryWriter.add_event(event)
tf.train.SummaryWriter.add_graph(graph, global_step=None,graph_def=None)
tf.train.SummaryWriter.add_meta_graph(meta_graph_def,global_step=None)
tf.train.SummaryWriter.add_run_metadata(run_metadata, tag,global_step=None)
tf.train.SummaryWriter.add_session_log(session_log,global_step=None)
tf.train.SummaryWriter.add_summary(summary,global_step=None)
tf.train.SummaryWriter.close()
tf.train.SummaryWriter.flush()
tf.train.SummaryWriter.get_logdir()
tf.train.SummaryWriter.reopen()
class tf.train.SummaryWriterCache
tf.train.SummaryWriterCache.clear()
tf.train.SummaryWriterCache.get(logdir)
tf.train.summary_iterator(path)
tf.train.global_step(sess, global_step_tensor)
tf.train.basic_train_loop(supervisor, train_step_fn, args=None,kwargs=None, master='')
tf.train.get_global_step(graph=None)
tf.train.assert_global_step(global_step_tensor)
tf.train.write_graph(graph_or_graph_def, logdir, name, as_text=True)
class tf.train.SessionRunHook
tf.train.SessionRunHook.after_run(run_context, run_values)
tf.train.SessionRunHook.before_run(run_context)
tf.train.SessionRunHook.begin()
tf.train.SessionRunHook.end(session)
class tf.train.LoggingTensorHook
tf.train.LoggingTensorHook.__init__(tensors, every_n_iter=None,every_n_secs=None)
tf.train.LoggingTensorHook.after_run(run_context, run_values)
tf.train.LoggingTensorHook.before_run(run_context)
tf.train.LoggingTensorHook.begin()
tf.train.LoggingTensorHook.end(session)
class tf.train.StopAtStepHook
tf.train.StopAtStepHook.__init__(num_steps=None, last_step=None)
tf.train.StopAtStepHook.after_run(run_context, run_values)
tf.train.StopAtStepHook.before_run(run_context)
tf.train.StopAtStepHook.begin()
tf.train.StopAtStepHook.end(session)
class tf.train.CheckpointSaverHook
tf.train.CheckpointSaverHook.__init__(checkpoint_dir,save_secs=None, save_steps=None, saver=None,checkpoint_basename='model.ckpt', scaffold=None)
tf.train.CheckpointSaverHook.after_run(run_context, run_values)
tf.train.CheckpointSaverHook.before_run(run_context)
tf.train.CheckpointSaverHook.begin()
tf.train.CheckpointSaverHook.end(session)
tf.train.NewCheckpointReader(filepattern)
class tf.train.StepCounterHook
tf.train.StepCounterHook.__init__(every_n_steps=100,every_n_secs=None, output_dir=None, summary_writer=None)
tf.train.StepCounterHook.after_run(run_context, run_values)
tf.train.StepCounterHook.before_run(run_context)
tf.train.StepCounterHook.begin()
tf.train.StepCounterHook.end(session)
class tf.train.NanLossDuringTrainingError
tf.train.NanLossDuringTrainingError.__str__()
class tf.train.NanTensorHook
tf.train.NanTensorHook.__init__(loss_tensor, fail_on_nan_loss=True)
tf.train.NanTensorHook.after_run(run_context, run_values)
tf.train.NanTensorHook.before_run(run_context)
tf.train.NanTensorHook.begin()
tf.train.NanTensorHook.end(session)
class tf.train.SummarySaverHook
tf.train.SummarySaverHook.__init__(save_steps=None, save_secs=None,output_dir=None, summary_writer=None, scaffold=None,summary_op=None)
tf.train.SummarySaverHook.after_run(run_context, run_values)
tf.train.SummarySaverHook.before_run(run_context)
tf.train.SummarySaverHook.begin()
tf.train.SummarySaverHook.end(session=None)
class tf.train.SessionRunArgs
tf.train.SessionRunArgs.__getnewargs__()
tf.train.SessionRunArgs.__getstate__()
tf.train.SessionRunArgs.__new__(cls, fetches, feed_dict=None,options=None)
tf.train.SessionRunArgs.__repr__()
tf.train.SessionRunArgs.feed_dict
tf.train.SessionRunArgs.fetches
tf.train.SessionRunArgs.options
class tf.train.SessionRunContext
tf.train.SessionRunContext.__init__(original_args, session)
tf.train.SessionRunContext.original_args
tf.train.SessionRunContext.request_stop()
tf.train.SessionRunContext.session
tf.train.SessionRunContext.stop_requested
class tf.train.SessionRunValues
tf.train.SessionRunValues.__getnewargs__()
tf.train.SessionRunValues.__getstate__()
tf.train.SessionRunValues.__new__(_cls, results, options,run_metadata)
tf.train.SessionRunValues.__repr__()
tf.train.SessionRunValues.options
tf.train.SessionRunValues.results
tf.train.SessionRunValues.run_metadata
class tf.train.LooperThread
tf.train.LooperThread.__init__(coord, timer_interval_secs,target=None, args=None, kwargs=None)
tf.train.LooperThread.__repr__()
tf.train.LooperThread.daemon
tf.train.LooperThread.getName()
tf.train.LooperThread.ident
tf.train.LooperThread.isAlive()
tf.train.LooperThread.isDaemon()
tf.train.LooperThread.is_alive()
tf.train.LooperThread.join(timeout=None)
tf.train.LooperThread.loop(coord, timer_interval_secs, target,args=None, kwargs=None)
tf.train.LooperThread.name
tf.train.LooperThread.run()
tf.train.LooperThread.run_loop()
tf.train.LooperThread.setDaemon(daemonic)
tf.train.LooperThread.setName(name)
tf.train.LooperThread.start()
tf.train.LooperThread.start_loop()
tf.train.LooperThread.stop_loop()
class tf.train.SyncReplicasOptimizer
tf.train.SyncReplicasOptimizer.__init__(opt, replicas_to_aggregate,variable_averages=None, variables_to_average=None, replica_id=None,total_num_replicas=0, use_locking=False, name='sync_replicas')
tf.train.SyncReplicasOptimizer.compute_gradients(*args, **kwargs)
tf.train.SyncReplicasOptimizer.apply_gradients(grads_and_vars,global_step=None, name=None)
tf.train.SyncReplicasOptimizer.get_chief_queue_runner()
tf.train.SyncReplicasOptimizer.get_init_tokens_op(num_tokens=-1)
tf.train.SyncReplicasOptimizer.get_clean_up_op()
tf.train.SyncReplicasOptimizer.get_slot(*args, **kwargs)
tf.train.SyncReplicasOptimizer.get_slot_names(*args, **kwargs)
class tf.train.SyncReplicasOptimizerV2
tf.train.SyncReplicasOptimizerV2.__init__(opt, replicas_to_aggregate,total_num_replicas=None, variable_averages=None,variables_to_average=None, use_locking=False, name='sync_replicas')
tf.train.SyncReplicasOptimizerV2.compute_gradients(*args, **kwargs)
tf.train.SyncReplicasOptimizerV2.apply_gradients(grads_and_vars,global_step=None, name=None)
tf.train.SyncReplicasOptimizerV2.get_chief_queue_runner()
tf.train.SyncReplicasOptimizerV2.get_init_tokens_op(num_tokens=-1)
tf.train.SyncReplicasOptimizerV2.get_slot(*args, **kwargs)
tf.train.SyncReplicasOptimizerV2.get_slot_names(*args, **kwargs)
tf.train.checkpoint_exists(checkpoint_prefix)
tf.train.do_quantize_training_on_graphdef(input_graph, num_bits)
tf.train.generate_checkpoint_state_proto(save_dir, model_checkpoint_path,all_model_checkpoint_paths=None)
tf.train.get_checkpoint_mtimes(checkpoint_prefixes)
tf.py_func(func, inp, Tout, stateful=True, name=None)
class tf.summary.FileWriter
tf.summary.FileWriter.__init__(logdir, graph=None, max_queue=10,flush_secs=120, graph_def=None)
tf.summary.FileWriter.add_summary(summary, global_step=None)
tf.summary.FileWriter.add_session_log(session_log,global_step=None)
tf.summary.FileWriter.add_event(event)
tf.summary.FileWriter.add_graph(graph, global_step=None,graph_def=None)
tf.summary.FileWriter.add_run_metadata(run_metadata, tag,global_step=None)
tf.summary.FileWriter.get_logdir()
tf.summary.FileWriter.flush()
tf.summary.FileWriter.close()
tf.summary.FileWriter.reopen()
tf.summary.tensor_summary(name, tensor,summary_description=None, collections=None)
tf.summary.scalar(name, tensor, collections=None)
tf.summary.histogram(name, values, collections=None)
tf.summary.audio(name, tensor, sample_rate, max_outputs=3,collections=None)
tf.summary.image(name, tensor, max_outputs=3, collections=None)
tf.summary.merge(inputs, collections=None, name=None)
tf.summary.merge_all(key='summaries')
tf.summary.get_summary_description(node_def)
class tf.summary.SummaryDescription
tf.summary.SummaryDescription.ByteSize()
tf.summary.SummaryDescription.Clear()
tf.summary.SummaryDescription.ClearExtension(extension_handle)
tf.summary.SummaryDescription.ClearField(field_name)
tf.summary.SummaryDescription.CopyFrom(other_msg)
tf.summary.SummaryDescription.DiscardUnknownFields()
tf.summary.SummaryDescription.FindInitializationErrors()
tf.summary.SummaryDescription.FromString(s)
tf.summary.SummaryDescription.HasExtension(extension_handle)
tf.summary.SummaryDescription.HasField(field_name)
tf.summary.SummaryDescription.IsInitialized(errors=None)
tf.summary.SummaryDescription.ListFields()
tf.summary.SummaryDescription.MergeFrom(msg)
tf.summary.SummaryDescription.MergeFromString(serialized)
tf.summary.SummaryDescription.ParseFromString(serialized)
tf.summary.SummaryDescription.RegisterExtension(extension_handle)
tf.summary.SummaryDescription.SerializePartialToString()
tf.summary.SummaryDescription.SerializeToString()
tf.summary.SummaryDescription.SetInParent()
tf.summary.SummaryDescription.WhichOneof(oneof_name)
tf.summary.SummaryDescription.__deepcopy__(memo=None)
tf.summary.SummaryDescription.__eq__(other)
tf.summary.SummaryDescription.__getstate__()
tf.summary.SummaryDescription.__hash__()
tf.summary.SummaryDescription.__init__(**kwargs)
tf.summary.SummaryDescription.__ne__(other_msg)
tf.summary.SummaryDescription.__repr__()
tf.summary.SummaryDescription.__setstate__(state)
tf.summary.SummaryDescription.__str__()
tf.summary.SummaryDescription.__unicode__()
tf.summary.SummaryDescription.type_hint
class tf.summary.TaggedRunMetadata
tf.summary.TaggedRunMetadata.ByteSize()
tf.summary.TaggedRunMetadata.Clear()
tf.summary.TaggedRunMetadata.ClearExtension(extension_handle)
tf.summary.TaggedRunMetadata.ClearField(field_name)
tf.summary.TaggedRunMetadata.CopyFrom(other_msg)
tf.summary.TaggedRunMetadata.DiscardUnknownFields()
tf.summary.TaggedRunMetadata.FindInitializationErrors()
tf.summary.TaggedRunMetadata.FromString(s)
tf.summary.TaggedRunMetadata.HasExtension(extension_handle)
tf.summary.TaggedRunMetadata.HasField(field_name)
tf.summary.TaggedRunMetadata.IsInitialized(errors=None)
tf.summary.TaggedRunMetadata.ListFields()
tf.summary.TaggedRunMetadata.MergeFrom(msg)
tf.summary.TaggedRunMetadata.MergeFromString(serialized)
tf.summary.TaggedRunMetadata.ParseFromString(serialized)
tf.summary.TaggedRunMetadata.RegisterExtension(extension_handle)
tf.summary.TaggedRunMetadata.SerializePartialToString()
tf.summary.TaggedRunMetadata.SerializeToString()
tf.summary.TaggedRunMetadata.SetInParent()
tf.summary.TaggedRunMetadata.WhichOneof(oneof_name)
tf.summary.TaggedRunMetadata.__deepcopy__(memo=None)
tf.summary.TaggedRunMetadata.__eq__(other)
tf.summary.TaggedRunMetadata.__getstate__()
tf.summary.TaggedRunMetadata.__hash__()
tf.summary.TaggedRunMetadata.__init__(**kwargs)
tf.summary.TaggedRunMetadata.__ne__(other_msg)
tf.summary.TaggedRunMetadata.__repr__()
tf.summary.TaggedRunMetadata.__setstate__(state)
tf.summary.TaggedRunMetadata.__str__()
tf.summary.TaggedRunMetadata.__unicode__()
tf.summary.TaggedRunMetadata.run_metadata
tf.summary.TaggedRunMetadata.tag
tf.test.main()
class tf.test.TestCase
tf.test.TestCase.__call__(*args, **kwds)
tf.test.TestCase.__eq__(other)
tf.test.TestCase.__hash__()
tf.test.TestCase.__init__(methodName='runTest')
tf.test.TestCase.__ne__(other)
tf.test.TestCase.__repr__()
tf.test.TestCase.__str__()
tf.test.TestCase.addCleanup(function, *args, **kwargs)
tf.test.TestCase.addTypeEqualityFunc(typeobj, function)
tf.test.TestCase.assertAllClose(a, b, rtol=1e-06, atol=1e-06)
tf.test.TestCase.assertAllCloseAccordingToType(a, b, rtol=1e-06, atol=1e-06)
tf.test.TestCase.assertAllEqual(a, b)
tf.test.TestCase.assertAlmostEqual(first, second, places=None,msg=None, delta=None)
tf.test.TestCase.assertAlmostEquals(first, second,places=None, msg=None, delta=None)
tf.test.TestCase.assertArrayNear(farray1, farray2, err)
tf.test.TestCase.assertDeviceEqual(device1, device2)
tf.test.TestCase.assertDictContainsSubset(expected, actual,msg=None)
tf.test.TestCase.assertDictEqual(d1, d2, msg=None)
tf.test.TestCase.assertEqual(first, second, msg=None)
tf.test.TestCase.assertEquals(first, second, msg=None)
tf.test.TestCase.assertFalse(expr, msg=None)
tf.test.TestCase.assertGreater(a, b, msg=None)
tf.test.TestCase.assertGreaterEqual(a, b, msg=None)
tf.test.TestCase.assertIn(member, container, msg=None)
tf.test.TestCase.assertIs(expr1, expr2, msg=None)
tf.test.TestCase.assertIsInstance(obj, cls, msg=None)
tf.test.TestCase.assertIsNone(obj, msg=None)
tf.test.TestCase.assertIsNot(expr1, expr2, msg=None)
tf.test.TestCase.assertIsNotNone(obj, msg=None)
tf.test.TestCase.assertItemsEqual(expected_seq, actual_seq,msg=None)
tf.test.TestCase.assertLess(a, b, msg=None)
tf.test.TestCase.assertLessEqual(a, b, msg=None)
tf.test.TestCase.assertListEqual(list1, list2, msg=None)
tf.test.TestCase.assertMultiLineEqual(first, second, msg=None)
tf.test.TestCase.assertNDArrayNear(ndarray1, ndarray2, err)
tf.test.TestCase.assertNear(f1, f2, err, msg=None)
tf.test.TestCase.assertNotAlmostEqual(first, second,places=None, msg=None, delta=None)
tf.test.TestCase.assertNotAlmostEquals(first, second,places=None, msg=None, delta=None)
tf.test.TestCase.assertNotEqual(first, second, msg=None)
tf.test.TestCase.assertNotEquals(first, second, msg=None)
tf.test.TestCase.assertNotIn(member, container, msg=None)
tf.test.TestCase.assertNotIsInstance(obj, cls, msg=None)
tf.test.TestCase.assertNotRegexpMatches(text,unexpected_regexp, msg=None)
tf.test.TestCase.assertProtoEquals(expected_message_maybe_ascii, message)
tf.test.TestCase.assertProtoEqualsVersion(expected, actual,producer=17, min_consumer=0)
tf.test.TestCase.assertRaises(excClass, callableObj=None,*args, **kwargs)
tf.test.TestCase.assertRaisesOpError(expected_err_re_or_predicate)
tf.test.TestCase.assertRaisesRegexp(expected_exception,expected_regexp, callable_obj=None, *args, **kwargs)
tf.test.TestCase.assertRaisesWithPredicateMatch(exception_type, expected_err_re_or_predicate)
tf.test.TestCase.assertRegexpMatches(text, expected_regexp,msg=None)
tf.test.TestCase.assertSequenceEqual(seq1, seq2, msg=None,seq_type=None)
tf.test.TestCase.assertSetEqual(set1, set2, msg=None)
tf.test.TestCase.assertShapeEqual(np_array, tf_tensor)
tf.test.TestCase.assertStartsWith(actual, expected_start,msg=None)
tf.test.TestCase.assertTrue(expr, msg=None)
tf.test.TestCase.assertTupleEqual(tuple1, tuple2, msg=None)
tf.test.TestCase.assert_(expr, msg=None)
tf.test.TestCase.checkedThread(target, args=None, kwargs=None)
tf.test.TestCase.countTestCases()
tf.test.TestCase.debug()
tf.test.TestCase.defaultTestResult()
tf.test.TestCase.doCleanups()
tf.test.TestCase.fail(msg=None)
tf.test.TestCase.failIf(*args, **kwargs)
tf.test.TestCase.failIfAlmostEqual(*args, **kwargs)
tf.test.TestCase.failIfEqual(*args, **kwargs)
tf.test.TestCase.failUnless(*args, **kwargs)
tf.test.TestCase.failUnlessAlmostEqual(*args, **kwargs)
tf.test.TestCase.failUnlessEqual(*args, **kwargs)
tf.test.TestCase.failUnlessRaises(*args, **kwargs)
tf.test.TestCase.get_temp_dir()
tf.test.TestCase.id()
tf.test.TestCase.run(result=None)
tf.test.TestCase.setUp()
tf.test.TestCase.setUpClass(cls)
tf.test.TestCase.shortDescription()
tf.test.TestCase.skipTest(reason)
tf.test.TestCase.tearDown()
tf.test.TestCase.tearDownClass(cls)
tf.test.TestCase.test_session(graph=None, config=None,use_gpu=False, force_gpu=False)
tf.test.test_src_dir_path(relative_path)
tf.test.assert_equal_graph_def(actual, expected)
tf.test.get_temp_dir()
tf.test.is_built_with_cuda()
tf.test.is_gpu_available()
tf.test.compute_gradient(x, x_shape, y, y_shape, x_init_value=None,delta=0.001, init_targets=None, extra_feed_dict=None)
tf.test.compute_gradient_error(x, x_shape, y, y_shape,x_init_value=None, delta=0.001, init_targets=None, extra_feed_dict=None)
class tf.test.Benchmark
tf.test.Benchmark.is_abstract(cls)
tf.test.Benchmark.report_benchmark(iters=None, cpu_time=None,wall_time=None, throughput=None, extras=None, name=None)
tf.test.Benchmark.run_op_benchmark(sess, op_or_tensor, feed_dict=None,burn_iters=2, min_iters=10, store_trace=False, name=None, extras=None,mbs=0)
tf.contrib.bayesflow.entropy.elbo_ratio(log_p, q, z=None, n=None,seed=None, form=None, name='elbo_ratio')
tf.contrib.bayesflow.entropy.entropy_shannon(p, z=None, n=None,seed=None, form=None, name='entropy_shannon')
tf.contrib.bayesflow.entropy.renyi_ratio(log_p, q, alpha, z=None,n=None, seed=None, name='renyi_ratio')
tf.contrib.bayesflow.entropy.renyi_alpha(step, decay_time,alpha_min, alpha_max=0.99999, name='renyi_alpha')
tf.contrib.bayesflow.monte_carlo.expectation(f, p, z=None, n=None,seed=None, name='expectation')
tf.contrib.bayesflow.monte_carlo.expectation_importance_sampler(f, log_p,sampling_dist_q, z=None, n=None, seed=None,name='expectation_importance_sampler')
tf.contrib.bayesflow.monte_carlo.expectation_importance_sampler_logspace(log_f, log_p, sampling_dist_q, z=None, n=None, seed=None,name='expectation_importance_sampler_logspace')
tf.contrib.bayesflow.stochastic_graph.surrogate_loss(sample_losses,stochastic_tensors=None, name='SurrogateLoss')
class tf.contrib.bayesflow.stochastic_tensor.BaseStochasticTensor
tf.contrib.bayesflow.stochastic_tensor.BaseStochasticTensor.__init__()
tf.contrib.bayesflow.stochastic_tensor.BaseStochasticTensor.dtype
tf.contrib.bayesflow.stochastic_tensor.BaseStochasticTensor.graph
tf.contrib.bayesflow.stochastic_tensor.BaseStochasticTensor.loss(sample_loss)
tf.contrib.bayesflow.stochastic_tensor.BaseStochasticTensor.name
tf.contrib.bayesflow.stochastic_tensor.BaseStochasticTensor.value(name=None)
class tf.contrib.bayesflow.stochastic_tensor.StochasticTensor
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.__init__(dist,name='StochasticTensor', dist_value_type=None, loss_fn=score_function)
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.distribution
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.dtype
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.entropy(name='entropy')
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.graph
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.loss(final_loss,name='Loss')
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.mean(name='mean')
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.name
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.value(name='value')
tf.contrib.bayesflow.stochastic_tensor.StochasticTensor.value_type
class tf.contrib.bayesflow.stochastic_tensor.MeanValue
tf.contrib.bayesflow.stochastic_tensor.MeanValue.__init__(stop_gradient=False)
tf.contrib.bayesflow.stochastic_tensor.MeanValue.declare_inputs(unused_stochastic_tensor, unused_inputs_dict)
tf.contrib.bayesflow.stochastic_tensor.MeanValue.popped_above(unused_value_type)
tf.contrib.bayesflow.stochastic_tensor.MeanValue.pushed_above(unused_value_type)
tf.contrib.bayesflow.stochastic_tensor.MeanValue.stop_gradient
class tf.contrib.bayesflow.stochastic_tensor.SampleValue
tf.contrib.bayesflow.stochastic_tensor.SampleValue.__init__(shape=(), stop_gradient=False)
tf.contrib.bayesflow.stochastic_tensor.SampleValue.declare_inputs(unused_stochastic_tensor, unused_inputs_dict)
tf.contrib.bayesflow.stochastic_tensor.SampleValue.popped_above(unused_value_type)
tf.contrib.bayesflow.stochastic_tensor.SampleValue.pushed_above(unused_value_type)
tf.contrib.bayesflow.stochastic_tensor.SampleValue.shape
tf.contrib.bayesflow.stochastic_tensor.SampleValue.stop_gradient
tf.contrib.bayesflow.stochastic_tensor.value_type(dist_value_type)
tf.contrib.bayesflow.stochastic_tensor.get_current_value_type()
class tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.__init__(dist, value, name=None)
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.distribution
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.dtype
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.entropy(name='entropy')
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.graph
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.loss(final_loss, name=None)
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.mean(name='mean')
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.name
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.value(name='value')
tf.contrib.bayesflow.stochastic_tensor.ObservedStochasticTensor.value_type
tf.contrib.bayesflow.variational_inference.elbo(log_likelihood,variational_with_prior=None, keep_batch_dim=True, form=None,name='ELBO')
tf.contrib.bayesflow.variational_inference.elbo_with_log_joint(log_joint, variational=None, keep_batch_dim=True, form=None,name='ELBO')
class tf.contrib.bayesflow.variational_inference.ELBOForms
tf.contrib.bayesflow.variational_inference.ELBOForms.check_form(form)
tf.contrib.bayesflow.variational_inference.register_prior(variational,prior)
tf.contrib.crf.crf_sequence_score(inputs, tag_indices,sequence_lengths, transition_params)
tf.contrib.crf.crf_log_norm(inputs, sequence_lengths,transition_params)
tf.contrib.crf.crf_log_likelihood(inputs, tag_indices,sequence_lengths, transition_params=None)
tf.contrib.crf.crf_unary_score(tag_indices, sequence_lengths,inputs)
tf.contrib.crf.crf_binary_score(tag_indices, sequence_lengths,transition_params)
class tf.contrib.crf.CrfForwardRnnCell
tf.contrib.crf.CrfForwardRnnCell.__call__(inputs, state,scope=None)
tf.contrib.crf.CrfForwardRnnCell.__init__(transition_params)
tf.contrib.crf.CrfForwardRnnCell.output_size
tf.contrib.crf.CrfForwardRnnCell.state_size
tf.contrib.crf.CrfForwardRnnCell.zero_state(batch_size, dtype)
tf.contrib.crf.viterbi_decode(score, transition_params)
class tf.contrib.distributions.Distribution
tf.contrib.distributions.Distribution.__init__(dtype, is_continuous,is_reparameterized, validate_args, allow_nan_stats, parameters=None,graph_parents=None, name=None)
tf.contrib.distributions.Distribution.allow_nan_stats
tf.contrib.distributions.Distribution.batch_shape(name='batch_shape')
tf.contrib.distributions.Distribution.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Distribution.copy(**override_parameters_kwargs)
tf.contrib.distributions.Distribution.dtype
tf.contrib.distributions.Distribution.entropy(name='entropy')
tf.contrib.distributions.Distribution.event_shape(name='event_shape')
tf.contrib.distributions.Distribution.get_batch_shape()
tf.contrib.distributions.Distribution.get_event_shape()
tf.contrib.distributions.Distribution.is_continuous
tf.contrib.distributions.Distribution.is_reparameterized
tf.contrib.distributions.Distribution.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Distribution.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Distribution.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Distribution.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Distribution.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Distribution.mean(name='mean')
tf.contrib.distributions.Distribution.mode(name='mode')
tf.contrib.distributions.Distribution.name
tf.contrib.distributions.Distribution.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Distribution.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.Distribution.parameters
tf.contrib.distributions.Distribution.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Distribution.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Distribution.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Distribution.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Distribution.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.Distribution.std(name='std')
tf.contrib.distributions.Distribution.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Distribution.validate_args
tf.contrib.distributions.Distribution.variance(name='variance')
class tf.contrib.distributions.Binomial
tf.contrib.distributions.Binomial.__init__(n, logits=None, p=None,validate_args=False, allow_nan_stats=True, name='Binomial')
tf.contrib.distributions.Binomial.allow_nan_stats
tf.contrib.distributions.Binomial.batch_shape(name='batch_shape')
tf.contrib.distributions.Binomial.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Binomial.copy(**override_parameters_kwargs)
tf.contrib.distributions.Binomial.dtype
tf.contrib.distributions.Binomial.entropy(name='entropy')
tf.contrib.distributions.Binomial.event_shape(name='event_shape')
tf.contrib.distributions.Binomial.get_batch_shape()
tf.contrib.distributions.Binomial.get_event_shape()
tf.contrib.distributions.Binomial.is_continuous
tf.contrib.distributions.Binomial.is_reparameterized
tf.contrib.distributions.Binomial.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Binomial.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Binomial.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Binomial.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Binomial.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Binomial.logits
tf.contrib.distributions.Binomial.mean(name='mean')
tf.contrib.distributions.Binomial.mode(name='mode')
tf.contrib.distributions.Binomial.n
tf.contrib.distributions.Binomial.name
tf.contrib.distributions.Binomial.p
tf.contrib.distributions.Binomial.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Binomial.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Binomial.parameters
tf.contrib.distributions.Binomial.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Binomial.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Binomial.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Binomial.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Binomial.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Binomial.std(name='std')
tf.contrib.distributions.Binomial.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Binomial.validate_args
tf.contrib.distributions.Binomial.variance(name='variance')
class tf.contrib.distributions.Bernoulli
tf.contrib.distributions.Bernoulli.__init__(logits=None, p=None,dtype=tf.int32, validate_args=False, allow_nan_stats=True,name='Bernoulli')
tf.contrib.distributions.Bernoulli.allow_nan_stats
tf.contrib.distributions.Bernoulli.batch_shape(name='batch_shape')
tf.contrib.distributions.Bernoulli.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Bernoulli.copy(**override_parameters_kwargs)
tf.contrib.distributions.Bernoulli.dtype
tf.contrib.distributions.Bernoulli.entropy(name='entropy')
tf.contrib.distributions.Bernoulli.event_shape(name='event_shape')
tf.contrib.distributions.Bernoulli.get_batch_shape()
tf.contrib.distributions.Bernoulli.get_event_shape()
tf.contrib.distributions.Bernoulli.is_continuous
tf.contrib.distributions.Bernoulli.is_reparameterized
tf.contrib.distributions.Bernoulli.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Bernoulli.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Bernoulli.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Bernoulli.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Bernoulli.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Bernoulli.logits
tf.contrib.distributions.Bernoulli.mean(name='mean')
tf.contrib.distributions.Bernoulli.mode(name='mode')
tf.contrib.distributions.Bernoulli.name
tf.contrib.distributions.Bernoulli.p
tf.contrib.distributions.Bernoulli.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Bernoulli.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Bernoulli.parameters
tf.contrib.distributions.Bernoulli.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Bernoulli.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Bernoulli.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Bernoulli.q
tf.contrib.distributions.Bernoulli.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Bernoulli.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.Bernoulli.std(name='std')
tf.contrib.distributions.Bernoulli.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Bernoulli.validate_args
tf.contrib.distributions.Bernoulli.variance(name='variance')
class tf.contrib.distributions.BernoulliWithSigmoidP
tf.contrib.distributions.BernoulliWithSigmoidP.__init__(p=None, dtype=tf.int32, validate_args=False, allow_nan_stats=True,name='BernoulliWithSigmoidP')
tf.contrib.distributions.BernoulliWithSigmoidP.allow_nan_stats
tf.contrib.distributions.BernoulliWithSigmoidP.batch_shape(name='batch_shape')
tf.contrib.distributions.BernoulliWithSigmoidP.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.copy(**override_parameters_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.dtype
tf.contrib.distributions.BernoulliWithSigmoidP.entropy(name='entropy')
tf.contrib.distributions.BernoulliWithSigmoidP.event_shape(name='event_shape')
tf.contrib.distributions.BernoulliWithSigmoidP.get_batch_shape()
tf.contrib.distributions.BernoulliWithSigmoidP.get_event_shape()
tf.contrib.distributions.BernoulliWithSigmoidP.is_continuous
tf.contrib.distributions.BernoulliWithSigmoidP.is_reparameterized
tf.contrib.distributions.BernoulliWithSigmoidP.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.log_survival_function(value, name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.logits
tf.contrib.distributions.BernoulliWithSigmoidP.mean(name='mean')
tf.contrib.distributions.BernoulliWithSigmoidP.mode(name='mode')
tf.contrib.distributions.BernoulliWithSigmoidP.name
tf.contrib.distributions.BernoulliWithSigmoidP.p
tf.contrib.distributions.BernoulliWithSigmoidP.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.BernoulliWithSigmoidP.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.BernoulliWithSigmoidP.parameters
tf.contrib.distributions.BernoulliWithSigmoidP.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.q
tf.contrib.distributions.BernoulliWithSigmoidP.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.std(name='std')
tf.contrib.distributions.BernoulliWithSigmoidP.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.BernoulliWithSigmoidP.validate_args
tf.contrib.distributions.BernoulliWithSigmoidP.variance(name='variance')
class tf.contrib.distributions.Beta
tf.contrib.distributions.Beta.__init__(a, b, validate_args=False,allow_nan_stats=True, name='Beta')
tf.contrib.distributions.Beta.a
tf.contrib.distributions.Beta.a_b_sum
tf.contrib.distributions.Beta.allow_nan_stats
tf.contrib.distributions.Beta.b
tf.contrib.distributions.Beta.batch_shape(name='batch_shape')
tf.contrib.distributions.Beta.cdf(value, name='cdf', **condition_kwargs)
tf.contrib.distributions.Beta.copy(**override_parameters_kwargs)
tf.contrib.distributions.Beta.dtype
tf.contrib.distributions.Beta.entropy(name='entropy')
tf.contrib.distributions.Beta.event_shape(name='event_shape')
tf.contrib.distributions.Beta.get_batch_shape()
tf.contrib.distributions.Beta.get_event_shape()
tf.contrib.distributions.Beta.is_continuous
tf.contrib.distributions.Beta.is_reparameterized
tf.contrib.distributions.Beta.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Beta.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Beta.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Beta.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Beta.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Beta.mean(name='mean')
tf.contrib.distributions.Beta.mode(name='mode')
tf.contrib.distributions.Beta.name
tf.contrib.distributions.Beta.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Beta.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Beta.parameters
tf.contrib.distributions.Beta.pdf(value, name='pdf', **condition_kwargs)
tf.contrib.distributions.Beta.pmf(value, name='pmf', **condition_kwargs)
tf.contrib.distributions.Beta.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Beta.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Beta.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Beta.std(name='std')
tf.contrib.distributions.Beta.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Beta.validate_args
tf.contrib.distributions.Beta.variance(name='variance')
class tf.contrib.distributions.BetaWithSoftplusAB
tf.contrib.distributions.BetaWithSoftplusAB.__init__(a, b,validate_args=False, allow_nan_stats=True, name='BetaWithSoftplusAB')
tf.contrib.distributions.BetaWithSoftplusAB.a
tf.contrib.distributions.BetaWithSoftplusAB.a_b_sum
tf.contrib.distributions.BetaWithSoftplusAB.allow_nan_stats
tf.contrib.distributions.BetaWithSoftplusAB.b
tf.contrib.distributions.BetaWithSoftplusAB.batch_shape(name='batch_shape')
tf.contrib.distributions.BetaWithSoftplusAB.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.copy(**override_parameters_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.dtype
tf.contrib.distributions.BetaWithSoftplusAB.entropy(name='entropy')
tf.contrib.distributions.BetaWithSoftplusAB.event_shape(name='event_shape')
tf.contrib.distributions.BetaWithSoftplusAB.get_batch_shape()
tf.contrib.distributions.BetaWithSoftplusAB.get_event_shape()
tf.contrib.distributions.BetaWithSoftplusAB.is_continuous
tf.contrib.distributions.BetaWithSoftplusAB.is_reparameterized
tf.contrib.distributions.BetaWithSoftplusAB.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.mean(name='mean')
tf.contrib.distributions.BetaWithSoftplusAB.mode(name='mode')
tf.contrib.distributions.BetaWithSoftplusAB.name
tf.contrib.distributions.BetaWithSoftplusAB.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.BetaWithSoftplusAB.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.BetaWithSoftplusAB.parameters
tf.contrib.distributions.BetaWithSoftplusAB.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.std(name='std')
tf.contrib.distributions.BetaWithSoftplusAB.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.BetaWithSoftplusAB.validate_args
tf.contrib.distributions.BetaWithSoftplusAB.variance(name='variance')
class tf.contrib.distributions.Categorical
tf.contrib.distributions.Categorical.__init__(logits=None, p=None,dtype=tf.int32, validate_args=False, allow_nan_stats=True,name='Categorical')
tf.contrib.distributions.Categorical.allow_nan_stats
tf.contrib.distributions.Categorical.batch_shape(name='batch_shape')
tf.contrib.distributions.Categorical.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Categorical.copy(**override_parameters_kwargs)
tf.contrib.distributions.Categorical.dtype
tf.contrib.distributions.Categorical.entropy(name='entropy')
tf.contrib.distributions.Categorical.event_shape(name='event_shape')
tf.contrib.distributions.Categorical.get_batch_shape()
tf.contrib.distributions.Categorical.get_event_shape()
tf.contrib.distributions.Categorical.is_continuous
tf.contrib.distributions.Categorical.is_reparameterized
tf.contrib.distributions.Categorical.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Categorical.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Categorical.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Categorical.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Categorical.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Categorical.logits
tf.contrib.distributions.Categorical.mean(name='mean')
tf.contrib.distributions.Categorical.mode(name='mode')
tf.contrib.distributions.Categorical.name
tf.contrib.distributions.Categorical.num_classes
tf.contrib.distributions.Categorical.p
tf.contrib.distributions.Categorical.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Categorical.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.Categorical.parameters
tf.contrib.distributions.Categorical.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Categorical.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Categorical.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Categorical.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Categorical.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.Categorical.std(name='std')
tf.contrib.distributions.Categorical.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Categorical.validate_args
tf.contrib.distributions.Categorical.variance(name='variance')
class tf.contrib.distributions.Chi2
tf.contrib.distributions.Chi2.__init__(df, validate_args=False,allow_nan_stats=True, name='Chi2')
tf.contrib.distributions.Chi2.allow_nan_stats
tf.contrib.distributions.Chi2.alpha
tf.contrib.distributions.Chi2.batch_shape(name='batch_shape')
tf.contrib.distributions.Chi2.beta
tf.contrib.distributions.Chi2.cdf(value, name='cdf', **condition_kwargs)
tf.contrib.distributions.Chi2.copy(**override_parameters_kwargs)
tf.contrib.distributions.Chi2.df
tf.contrib.distributions.Chi2.dtype
tf.contrib.distributions.Chi2.entropy(name='entropy')
tf.contrib.distributions.Chi2.event_shape(name='event_shape')
tf.contrib.distributions.Chi2.get_batch_shape()
tf.contrib.distributions.Chi2.get_event_shape()
tf.contrib.distributions.Chi2.is_continuous
tf.contrib.distributions.Chi2.is_reparameterized
tf.contrib.distributions.Chi2.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Chi2.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Chi2.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Chi2.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Chi2.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Chi2.mean(name='mean')
tf.contrib.distributions.Chi2.mode(name='mode')
tf.contrib.distributions.Chi2.name
tf.contrib.distributions.Chi2.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Chi2.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Chi2.parameters
tf.contrib.distributions.Chi2.pdf(value, name='pdf', **condition_kwargs)
tf.contrib.distributions.Chi2.pmf(value, name='pmf', **condition_kwargs)
tf.contrib.distributions.Chi2.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Chi2.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Chi2.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Chi2.std(name='std')
tf.contrib.distributions.Chi2.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Chi2.validate_args
tf.contrib.distributions.Chi2.variance(name='variance')
class tf.contrib.distributions.Chi2WithAbsDf
tf.contrib.distributions.Chi2WithAbsDf.__init__(df, validate_args=False,allow_nan_stats=True, name='Chi2WithAbsDf')
tf.contrib.distributions.Chi2WithAbsDf.allow_nan_stats
tf.contrib.distributions.Chi2WithAbsDf.alpha
tf.contrib.distributions.Chi2WithAbsDf.batch_shape(name='batch_shape')
tf.contrib.distributions.Chi2WithAbsDf.beta
tf.contrib.distributions.Chi2WithAbsDf.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.copy(**override_parameters_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.df
tf.contrib.distributions.Chi2WithAbsDf.dtype
tf.contrib.distributions.Chi2WithAbsDf.entropy(name='entropy')
tf.contrib.distributions.Chi2WithAbsDf.event_shape(name='event_shape')
tf.contrib.distributions.Chi2WithAbsDf.get_batch_shape()
tf.contrib.distributions.Chi2WithAbsDf.get_event_shape()
tf.contrib.distributions.Chi2WithAbsDf.is_continuous
tf.contrib.distributions.Chi2WithAbsDf.is_reparameterized
tf.contrib.distributions.Chi2WithAbsDf.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.mean(name='mean')
tf.contrib.distributions.Chi2WithAbsDf.mode(name='mode')
tf.contrib.distributions.Chi2WithAbsDf.name
tf.contrib.distributions.Chi2WithAbsDf.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Chi2WithAbsDf.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.Chi2WithAbsDf.parameters
tf.contrib.distributions.Chi2WithAbsDf.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.std(name='std')
tf.contrib.distributions.Chi2WithAbsDf.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Chi2WithAbsDf.validate_args
tf.contrib.distributions.Chi2WithAbsDf.variance(name='variance')
class tf.contrib.distributions.Exponential
tf.contrib.distributions.Exponential.__init__(lam, validate_args=False,allow_nan_stats=True, name='Exponential')
tf.contrib.distributions.Exponential.allow_nan_stats
tf.contrib.distributions.Exponential.alpha
tf.contrib.distributions.Exponential.batch_shape(name='batch_shape')
tf.contrib.distributions.Exponential.beta
tf.contrib.distributions.Exponential.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Exponential.copy(**override_parameters_kwargs)
tf.contrib.distributions.Exponential.dtype
tf.contrib.distributions.Exponential.entropy(name='entropy')
tf.contrib.distributions.Exponential.event_shape(name='event_shape')
tf.contrib.distributions.Exponential.get_batch_shape()
tf.contrib.distributions.Exponential.get_event_shape()
tf.contrib.distributions.Exponential.is_continuous
tf.contrib.distributions.Exponential.is_reparameterized
tf.contrib.distributions.Exponential.lam
tf.contrib.distributions.Exponential.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Exponential.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Exponential.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Exponential.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Exponential.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Exponential.mean(name='mean')
tf.contrib.distributions.Exponential.mode(name='mode')
tf.contrib.distributions.Exponential.name
tf.contrib.distributions.Exponential.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Exponential.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.Exponential.parameters
tf.contrib.distributions.Exponential.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Exponential.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Exponential.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Exponential.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Exponential.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.Exponential.std(name='std')
tf.contrib.distributions.Exponential.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Exponential.validate_args
tf.contrib.distributions.Exponential.variance(name='variance')
class tf.contrib.distributions.ExponentialWithSoftplusLam
tf.contrib.distributions.ExponentialWithSoftplusLam.__init__(lam,validate_args=False, allow_nan_stats=True,name='ExponentialWithSoftplusLam')
tf.contrib.distributions.ExponentialWithSoftplusLam.allow_nan_stats
tf.contrib.distributions.ExponentialWithSoftplusLam.alpha
tf.contrib.distributions.ExponentialWithSoftplusLam.batch_shape(name='batch_shape')
tf.contrib.distributions.ExponentialWithSoftplusLam.beta
tf.contrib.distributions.ExponentialWithSoftplusLam.cdf(value,name='cdf', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.copy(**override_parameters_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.dtype
tf.contrib.distributions.ExponentialWithSoftplusLam.entropy(name='entropy')
tf.contrib.distributions.ExponentialWithSoftplusLam.event_shape(name='event_shape')
tf.contrib.distributions.ExponentialWithSoftplusLam.get_batch_shape()
tf.contrib.distributions.ExponentialWithSoftplusLam.get_event_shape()
tf.contrib.distributions.ExponentialWithSoftplusLam.is_continuous
tf.contrib.distributions.ExponentialWithSoftplusLam.is_reparameterized
tf.contrib.distributions.ExponentialWithSoftplusLam.lam
tf.contrib.distributions.ExponentialWithSoftplusLam.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.log_survival_function(value, name='log_survival_function',**condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.mean(name='mean')
tf.contrib.distributions.ExponentialWithSoftplusLam.mode(name='mode')
tf.contrib.distributions.ExponentialWithSoftplusLam.name
tf.contrib.distributions.ExponentialWithSoftplusLam.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.ExponentialWithSoftplusLam.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.ExponentialWithSoftplusLam.parameters
tf.contrib.distributions.ExponentialWithSoftplusLam.pdf(value,name='pdf', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.pmf(value,name='pmf', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.prob(value,name='prob', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.sample(sample_shape=(), seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.sample_n(n,seed=None, name='sample_n', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.std(name='std')
tf.contrib.distributions.ExponentialWithSoftplusLam.survival_function(value, name='survival_function', **condition_kwargs)
tf.contrib.distributions.ExponentialWithSoftplusLam.validate_args
tf.contrib.distributions.ExponentialWithSoftplusLam.variance(name='variance')
class tf.contrib.distributions.Gamma
tf.contrib.distributions.Gamma.__init__(alpha, beta, validate_args=False,allow_nan_stats=True, name='Gamma')
tf.contrib.distributions.Gamma.allow_nan_stats
tf.contrib.distributions.Gamma.alpha
tf.contrib.distributions.Gamma.batch_shape(name='batch_shape')
tf.contrib.distributions.Gamma.beta
tf.contrib.distributions.Gamma.cdf(value, name='cdf', **condition_kwargs)
tf.contrib.distributions.Gamma.copy(**override_parameters_kwargs)
tf.contrib.distributions.Gamma.dtype
tf.contrib.distributions.Gamma.entropy(name='entropy')
tf.contrib.distributions.Gamma.event_shape(name='event_shape')
tf.contrib.distributions.Gamma.get_batch_shape()
tf.contrib.distributions.Gamma.get_event_shape()
tf.contrib.distributions.Gamma.is_continuous
tf.contrib.distributions.Gamma.is_reparameterized
tf.contrib.distributions.Gamma.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Gamma.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Gamma.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Gamma.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Gamma.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Gamma.mean(name='mean')
tf.contrib.distributions.Gamma.mode(name='mode')
tf.contrib.distributions.Gamma.name
tf.contrib.distributions.Gamma.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Gamma.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Gamma.parameters
tf.contrib.distributions.Gamma.pdf(value, name='pdf', **condition_kwargs)
tf.contrib.distributions.Gamma.pmf(value, name='pmf', **condition_kwargs)
tf.contrib.distributions.Gamma.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Gamma.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Gamma.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Gamma.std(name='std')
tf.contrib.distributions.Gamma.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Gamma.validate_args
tf.contrib.distributions.Gamma.variance(name='variance')
class tf.contrib.distributions.GammaWithSoftplusAlphaBeta
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.__init__(alpha, beta,validate_args=False, allow_nan_stats=True,name='GammaWithSoftplusAlphaBeta')
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.allow_nan_stats
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.alpha
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.batch_shape(name='batch_shape')
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.beta
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.cdf(value,name='cdf', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.copy(**override_parameters_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.dtype
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.entropy(name='entropy')
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.event_shape(name='event_shape')
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.get_batch_shape()
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.get_event_shape()
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.is_continuous
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.is_reparameterized
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.log_survival_function(value, name='log_survival_function',**condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.mean(name='mean')
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.mode(name='mode')
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.name
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.parameters
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.pdf(value,name='pdf', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.pmf(value,name='pmf', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.prob(value,name='prob', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.sample(sample_shape=(), seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.sample_n(n,seed=None, name='sample_n', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.std(name='std')
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.survival_function(value, name='survival_function', **condition_kwargs)
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.validate_args
tf.contrib.distributions.GammaWithSoftplusAlphaBeta.variance(name='variance')
class tf.contrib.distributions.InverseGamma
tf.contrib.distributions.InverseGamma.__init__(alpha, beta,validate_args=False, allow_nan_stats=True, name='InverseGamma')
tf.contrib.distributions.InverseGamma.allow_nan_stats
tf.contrib.distributions.InverseGamma.alpha
tf.contrib.distributions.InverseGamma.batch_shape(name='batch_shape')
tf.contrib.distributions.InverseGamma.beta
tf.contrib.distributions.InverseGamma.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.InverseGamma.copy(**override_parameters_kwargs)
tf.contrib.distributions.InverseGamma.dtype
tf.contrib.distributions.InverseGamma.entropy(name='entropy')
tf.contrib.distributions.InverseGamma.event_shape(name='event_shape')
tf.contrib.distributions.InverseGamma.get_batch_shape()
tf.contrib.distributions.InverseGamma.get_event_shape()
tf.contrib.distributions.InverseGamma.is_continuous
tf.contrib.distributions.InverseGamma.is_reparameterized
tf.contrib.distributions.InverseGamma.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.InverseGamma.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.InverseGamma.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.InverseGamma.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.InverseGamma.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.InverseGamma.mean(name='mean')
tf.contrib.distributions.InverseGamma.mode(name='mode')
tf.contrib.distributions.InverseGamma.name
tf.contrib.distributions.InverseGamma.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.InverseGamma.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.InverseGamma.parameters
tf.contrib.distributions.InverseGamma.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.InverseGamma.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.InverseGamma.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.InverseGamma.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.InverseGamma.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.InverseGamma.std(name='std')
tf.contrib.distributions.InverseGamma.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.InverseGamma.validate_args
tf.contrib.distributions.InverseGamma.variance(name='variance')
class tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.__init__(alpha, beta, validate_args=False, allow_nan_stats=True,name='InverseGammaWithSoftplusAlphaBeta')
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.allow_nan_stats
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.alpha
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.batch_shape(name='batch_shape')
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.beta
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.cdf(value,name='cdf', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.copy(**override_parameters_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.dtype
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.entropy(name='entropy')
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.event_shape(name='event_shape')
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.get_batch_shape()
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.get_event_shape()
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.is_continuous
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.is_reparameterized
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.log_prob(value, name='log_prob', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.log_survival_function(value, name='log_survival_function',**condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.mean(name='mean')
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.mode(name='mode')
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.name
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.param_shapes(cls, sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.parameters
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.pdf(value,name='pdf', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.pmf(value,name='pmf', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.prob(value,name='prob', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.sample(sample_shape=(), seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.sample_n(n,seed=None, name='sample_n', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.std(name='std')
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.survival_function(value, name='survival_function', **condition_kwargs)
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.validate_args
tf.contrib.distributions.InverseGammaWithSoftplusAlphaBeta.variance(name='variance')
class tf.contrib.distributions.Laplace
tf.contrib.distributions.Laplace.__init__(loc, scale,validate_args=False, allow_nan_stats=True, name='Laplace')
tf.contrib.distributions.Laplace.allow_nan_stats
tf.contrib.distributions.Laplace.batch_shape(name='batch_shape')
tf.contrib.distributions.Laplace.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Laplace.copy(**override_parameters_kwargs)
tf.contrib.distributions.Laplace.dtype
tf.contrib.distributions.Laplace.entropy(name='entropy')
tf.contrib.distributions.Laplace.event_shape(name='event_shape')
tf.contrib.distributions.Laplace.get_batch_shape()
tf.contrib.distributions.Laplace.get_event_shape()
tf.contrib.distributions.Laplace.is_continuous
tf.contrib.distributions.Laplace.is_reparameterized
tf.contrib.distributions.Laplace.loc
tf.contrib.distributions.Laplace.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Laplace.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Laplace.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Laplace.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Laplace.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Laplace.mean(name='mean')
tf.contrib.distributions.Laplace.mode(name='mode')
tf.contrib.distributions.Laplace.name
tf.contrib.distributions.Laplace.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Laplace.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Laplace.parameters
tf.contrib.distributions.Laplace.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Laplace.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Laplace.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Laplace.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Laplace.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Laplace.scale
tf.contrib.distributions.Laplace.std(name='std')
tf.contrib.distributions.Laplace.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Laplace.validate_args
tf.contrib.distributions.Laplace.variance(name='variance')
class tf.contrib.distributions.LaplaceWithSoftplusScale
tf.contrib.distributions.LaplaceWithSoftplusScale.__init__(loc, scale,validate_args=False, allow_nan_stats=True,name='LaplaceWithSoftplusScale')
tf.contrib.distributions.LaplaceWithSoftplusScale.allow_nan_stats
tf.contrib.distributions.LaplaceWithSoftplusScale.batch_shape(name='batch_shape')
tf.contrib.distributions.LaplaceWithSoftplusScale.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.copy(**override_parameters_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.dtype
tf.contrib.distributions.LaplaceWithSoftplusScale.entropy(name='entropy')
tf.contrib.distributions.LaplaceWithSoftplusScale.event_shape(name='event_shape')
tf.contrib.distributions.LaplaceWithSoftplusScale.get_batch_shape()
tf.contrib.distributions.LaplaceWithSoftplusScale.get_event_shape()
tf.contrib.distributions.LaplaceWithSoftplusScale.is_continuous
tf.contrib.distributions.LaplaceWithSoftplusScale.is_reparameterized
tf.contrib.distributions.LaplaceWithSoftplusScale.loc
tf.contrib.distributions.LaplaceWithSoftplusScale.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.log_survival_function(value, name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.mean(name='mean')
tf.contrib.distributions.LaplaceWithSoftplusScale.mode(name='mode')
tf.contrib.distributions.LaplaceWithSoftplusScale.name
tf.contrib.distributions.LaplaceWithSoftplusScale.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.LaplaceWithSoftplusScale.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.LaplaceWithSoftplusScale.parameters
tf.contrib.distributions.LaplaceWithSoftplusScale.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.prob(value,name='prob', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.scale
tf.contrib.distributions.LaplaceWithSoftplusScale.std(name='std')
tf.contrib.distributions.LaplaceWithSoftplusScale.survival_function(value, name='survival_function', **condition_kwargs)
tf.contrib.distributions.LaplaceWithSoftplusScale.validate_args
tf.contrib.distributions.LaplaceWithSoftplusScale.variance(name='variance')
class tf.contrib.distributions.Normal
tf.contrib.distributions.Normal.__init__(mu, sigma, validate_args=False,allow_nan_stats=True, name='Normal')
tf.contrib.distributions.Normal.allow_nan_stats
tf.contrib.distributions.Normal.batch_shape(name='batch_shape')
tf.contrib.distributions.Normal.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Normal.copy(**override_parameters_kwargs)
tf.contrib.distributions.Normal.dtype
tf.contrib.distributions.Normal.entropy(name='entropy')
tf.contrib.distributions.Normal.event_shape(name='event_shape')
tf.contrib.distributions.Normal.get_batch_shape()
tf.contrib.distributions.Normal.get_event_shape()
tf.contrib.distributions.Normal.is_continuous
tf.contrib.distributions.Normal.is_reparameterized
tf.contrib.distributions.Normal.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Normal.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Normal.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Normal.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Normal.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Normal.mean(name='mean')
tf.contrib.distributions.Normal.mode(name='mode')
tf.contrib.distributions.Normal.mu
tf.contrib.distributions.Normal.name
tf.contrib.distributions.Normal.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Normal.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Normal.parameters
tf.contrib.distributions.Normal.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Normal.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Normal.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Normal.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Normal.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Normal.sigma
tf.contrib.distributions.Normal.std(name='std')
tf.contrib.distributions.Normal.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Normal.validate_args
tf.contrib.distributions.Normal.variance(name='variance')
class tf.contrib.distributions.NormalWithSoftplusSigma
tf.contrib.distributions.NormalWithSoftplusSigma.__init__(mu, sigma,validate_args=False, allow_nan_stats=True,name='NormalWithSoftplusSigma')
tf.contrib.distributions.NormalWithSoftplusSigma.allow_nan_stats
tf.contrib.distributions.NormalWithSoftplusSigma.batch_shape(name='batch_shape')
tf.contrib.distributions.NormalWithSoftplusSigma.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.copy(**override_parameters_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.dtype
tf.contrib.distributions.NormalWithSoftplusSigma.entropy(name='entropy')
tf.contrib.distributions.NormalWithSoftplusSigma.event_shape(name='event_shape')
tf.contrib.distributions.NormalWithSoftplusSigma.get_batch_shape()
tf.contrib.distributions.NormalWithSoftplusSigma.get_event_shape()
tf.contrib.distributions.NormalWithSoftplusSigma.is_continuous
tf.contrib.distributions.NormalWithSoftplusSigma.is_reparameterized
tf.contrib.distributions.NormalWithSoftplusSigma.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.log_survival_function(value, name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.mean(name='mean')
tf.contrib.distributions.NormalWithSoftplusSigma.mode(name='mode')
tf.contrib.distributions.NormalWithSoftplusSigma.mu
tf.contrib.distributions.NormalWithSoftplusSigma.name
tf.contrib.distributions.NormalWithSoftplusSigma.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.NormalWithSoftplusSigma.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.NormalWithSoftplusSigma.parameters
tf.contrib.distributions.NormalWithSoftplusSigma.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.sigma
tf.contrib.distributions.NormalWithSoftplusSigma.std(name='std')
tf.contrib.distributions.NormalWithSoftplusSigma.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.NormalWithSoftplusSigma.validate_args
tf.contrib.distributions.NormalWithSoftplusSigma.variance(name='variance')
class tf.contrib.distributions.Poisson
tf.contrib.distributions.Poisson.__init__(lam, validate_args=False,allow_nan_stats=True, name='Poisson')
tf.contrib.distributions.Poisson.allow_nan_stats
tf.contrib.distributions.Poisson.batch_shape(name='batch_shape')
tf.contrib.distributions.Poisson.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Poisson.copy(**override_parameters_kwargs)
tf.contrib.distributions.Poisson.dtype
tf.contrib.distributions.Poisson.entropy(name='entropy')
tf.contrib.distributions.Poisson.event_shape(name='event_shape')
tf.contrib.distributions.Poisson.get_batch_shape()
tf.contrib.distributions.Poisson.get_event_shape()
tf.contrib.distributions.Poisson.is_continuous
tf.contrib.distributions.Poisson.is_reparameterized
tf.contrib.distributions.Poisson.lam
tf.contrib.distributions.Poisson.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Poisson.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Poisson.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Poisson.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Poisson.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Poisson.mean(name='mean')
tf.contrib.distributions.Poisson.mode(name='mode')
tf.contrib.distributions.Poisson.name
tf.contrib.distributions.Poisson.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Poisson.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Poisson.parameters
tf.contrib.distributions.Poisson.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Poisson.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Poisson.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Poisson.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Poisson.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Poisson.std(name='std')
tf.contrib.distributions.Poisson.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Poisson.validate_args
tf.contrib.distributions.Poisson.variance(name='variance')
class tf.contrib.distributions.StudentT
tf.contrib.distributions.StudentT.__init__(df, mu, sigma,validate_args=False, allow_nan_stats=True, name='StudentT')
tf.contrib.distributions.StudentT.allow_nan_stats
tf.contrib.distributions.StudentT.batch_shape(name='batch_shape')
tf.contrib.distributions.StudentT.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.StudentT.copy(**override_parameters_kwargs)
tf.contrib.distributions.StudentT.df
tf.contrib.distributions.StudentT.dtype
tf.contrib.distributions.StudentT.entropy(name='entropy')
tf.contrib.distributions.StudentT.event_shape(name='event_shape')
tf.contrib.distributions.StudentT.get_batch_shape()
tf.contrib.distributions.StudentT.get_event_shape()
tf.contrib.distributions.StudentT.is_continuous
tf.contrib.distributions.StudentT.is_reparameterized
tf.contrib.distributions.StudentT.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.StudentT.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.StudentT.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.StudentT.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.StudentT.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.StudentT.mean(name='mean')
tf.contrib.distributions.StudentT.mode(name='mode')
tf.contrib.distributions.StudentT.mu
tf.contrib.distributions.StudentT.name
tf.contrib.distributions.StudentT.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.StudentT.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.StudentT.parameters
tf.contrib.distributions.StudentT.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.StudentT.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.StudentT.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.StudentT.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.StudentT.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.StudentT.sigma
tf.contrib.distributions.StudentT.std(name='std')
tf.contrib.distributions.StudentT.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.StudentT.validate_args
tf.contrib.distributions.StudentT.variance(name='variance')
class tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.__init__(df, mu,sigma, validate_args=False, allow_nan_stats=True,name='StudentTWithAbsDfSoftplusSigma')
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.allow_nan_stats
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.batch_shape(name='batch_shape')
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.cdf(value,name='cdf', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.copy(**override_parameters_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.df
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.dtype
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.entropy(name='entropy')
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.event_shape(name='event_shape')
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.get_batch_shape()
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.get_event_shape()
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.is_continuous
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.is_reparameterized
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.log_survival_function(value, name='log_survival_function',**condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.mean(name='mean')
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.mode(name='mode')
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.mu
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.name
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.parameters
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.pdf(value,name='pdf', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.pmf(value,name='pmf', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.prob(value,name='prob', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.sample(sample_shape=(), seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.sample_n(n,seed=None, name='sample_n', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.sigma
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.std(name='std')
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.survival_function(value, name='survival_function', **condition_kwargs)
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.validate_args
tf.contrib.distributions.StudentTWithAbsDfSoftplusSigma.variance(name='variance')
class tf.contrib.distributions.Uniform
tf.contrib.distributions.Uniform.__init__(a=0.0, b=1.0,validate_args=False, allow_nan_stats=True, name='Uniform')
tf.contrib.distributions.Uniform.a
tf.contrib.distributions.Uniform.allow_nan_stats
tf.contrib.distributions.Uniform.b
tf.contrib.distributions.Uniform.batch_shape(name='batch_shape')
tf.contrib.distributions.Uniform.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Uniform.copy(**override_parameters_kwargs)
tf.contrib.distributions.Uniform.dtype
tf.contrib.distributions.Uniform.entropy(name='entropy')
tf.contrib.distributions.Uniform.event_shape(name='event_shape')
tf.contrib.distributions.Uniform.get_batch_shape()
tf.contrib.distributions.Uniform.get_event_shape()
tf.contrib.distributions.Uniform.is_continuous
tf.contrib.distributions.Uniform.is_reparameterized
tf.contrib.distributions.Uniform.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Uniform.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Uniform.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Uniform.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Uniform.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Uniform.mean(name='mean')
tf.contrib.distributions.Uniform.mode(name='mode')
tf.contrib.distributions.Uniform.name
tf.contrib.distributions.Uniform.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Uniform.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Uniform.parameters
tf.contrib.distributions.Uniform.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Uniform.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Uniform.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Uniform.range(name='range')
tf.contrib.distributions.Uniform.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Uniform.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Uniform.std(name='std')
tf.contrib.distributions.Uniform.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Uniform.validate_args
tf.contrib.distributions.Uniform.variance(name='variance')
class tf.contrib.distributions.MultivariateNormalDiag
tf.contrib.distributions.MultivariateNormalDiag.__init__(mu, diag_stdev,validate_args=False, allow_nan_stats=True, name='MultivariateNormalDiag')
tf.contrib.distributions.MultivariateNormalDiag.allow_nan_stats
tf.contrib.distributions.MultivariateNormalDiag.batch_shape(name='batch_shape')
tf.contrib.distributions.MultivariateNormalDiag.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.copy(**override_parameters_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.dtype
tf.contrib.distributions.MultivariateNormalDiag.entropy(name='entropy')
tf.contrib.distributions.MultivariateNormalDiag.event_shape(name='event_shape')
tf.contrib.distributions.MultivariateNormalDiag.get_batch_shape()
tf.contrib.distributions.MultivariateNormalDiag.get_event_shape()
tf.contrib.distributions.MultivariateNormalDiag.is_continuous
tf.contrib.distributions.MultivariateNormalDiag.is_reparameterized
tf.contrib.distributions.MultivariateNormalDiag.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.log_sigma_det(name='log_sigma_det')
tf.contrib.distributions.MultivariateNormalDiag.log_survival_function(value, name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.mean(name='mean')
tf.contrib.distributions.MultivariateNormalDiag.mode(name='mode')
tf.contrib.distributions.MultivariateNormalDiag.mu
tf.contrib.distributions.MultivariateNormalDiag.name
tf.contrib.distributions.MultivariateNormalDiag.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.MultivariateNormalDiag.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.MultivariateNormalDiag.parameters
tf.contrib.distributions.MultivariateNormalDiag.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.sigma
tf.contrib.distributions.MultivariateNormalDiag.sigma_det(name='sigma_det')
tf.contrib.distributions.MultivariateNormalDiag.std(name='std')
tf.contrib.distributions.MultivariateNormalDiag.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiag.validate_args
tf.contrib.distributions.MultivariateNormalDiag.variance(name='variance')
class tf.contrib.distributions.MultivariateNormalFull
tf.contrib.distributions.MultivariateNormalFull.__init__(mu, sigma,validate_args=False, allow_nan_stats=True, name='MultivariateNormalFull')
tf.contrib.distributions.MultivariateNormalFull.allow_nan_stats
tf.contrib.distributions.MultivariateNormalFull.batch_shape(name='batch_shape')
tf.contrib.distributions.MultivariateNormalFull.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.copy(**override_parameters_kwargs)
tf.contrib.distributions.MultivariateNormalFull.dtype
tf.contrib.distributions.MultivariateNormalFull.entropy(name='entropy')
tf.contrib.distributions.MultivariateNormalFull.event_shape(name='event_shape')
tf.contrib.distributions.MultivariateNormalFull.get_batch_shape()
tf.contrib.distributions.MultivariateNormalFull.get_event_shape()
tf.contrib.distributions.MultivariateNormalFull.is_continuous
tf.contrib.distributions.MultivariateNormalFull.is_reparameterized
tf.contrib.distributions.MultivariateNormalFull.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.log_sigma_det(name='log_sigma_det')
tf.contrib.distributions.MultivariateNormalFull.log_survival_function(value, name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.mean(name='mean')
tf.contrib.distributions.MultivariateNormalFull.mode(name='mode')
tf.contrib.distributions.MultivariateNormalFull.mu
tf.contrib.distributions.MultivariateNormalFull.name
tf.contrib.distributions.MultivariateNormalFull.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.MultivariateNormalFull.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.MultivariateNormalFull.parameters
tf.contrib.distributions.MultivariateNormalFull.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.sigma
tf.contrib.distributions.MultivariateNormalFull.sigma_det(name='sigma_det')
tf.contrib.distributions.MultivariateNormalFull.std(name='std')
tf.contrib.distributions.MultivariateNormalFull.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalFull.validate_args
tf.contrib.distributions.MultivariateNormalFull.variance(name='variance')
class tf.contrib.distributions.MultivariateNormalCholesky
tf.contrib.distributions.MultivariateNormalCholesky.__init__(mu, chol,validate_args=False, allow_nan_stats=True,name='MultivariateNormalCholesky')
tf.contrib.distributions.MultivariateNormalCholesky.allow_nan_stats
tf.contrib.distributions.MultivariateNormalCholesky.batch_shape(name='batch_shape')
tf.contrib.distributions.MultivariateNormalCholesky.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.copy(**override_parameters_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.dtype
tf.contrib.distributions.MultivariateNormalCholesky.entropy(name='entropy')
tf.contrib.distributions.MultivariateNormalCholesky.event_shape(name='event_shape')
tf.contrib.distributions.MultivariateNormalCholesky.get_batch_shape()
tf.contrib.distributions.MultivariateNormalCholesky.get_event_shape()
tf.contrib.distributions.MultivariateNormalCholesky.is_continuous
tf.contrib.distributions.MultivariateNormalCholesky.is_reparameterized
tf.contrib.distributions.MultivariateNormalCholesky.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.log_sigma_det(name='log_sigma_det')
tf.contrib.distributions.MultivariateNormalCholesky.log_survival_function(value, name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.mean(name='mean')
tf.contrib.distributions.MultivariateNormalCholesky.mode(name='mode')
tf.contrib.distributions.MultivariateNormalCholesky.mu
tf.contrib.distributions.MultivariateNormalCholesky.name
tf.contrib.distributions.MultivariateNormalCholesky.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.MultivariateNormalCholesky.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.MultivariateNormalCholesky.parameters
tf.contrib.distributions.MultivariateNormalCholesky.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.prob(value,name='prob', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.sample(sample_shape=(), seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.sigma
tf.contrib.distributions.MultivariateNormalCholesky.sigma_det(name='sigma_det')
tf.contrib.distributions.MultivariateNormalCholesky.std(name='std')
tf.contrib.distributions.MultivariateNormalCholesky.survival_function(value, name='survival_function', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalCholesky.validate_args
tf.contrib.distributions.MultivariateNormalCholesky.variance(name='variance')
class tf.contrib.distributions.MultivariateNormalDiagPlusVDVT
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.__init__(mu,diag_large, v, diag_small=None, validate_args=False, allow_nan_stats=True,name='MultivariateNormalDiagPlusVDVT')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.allow_nan_stats
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.batch_shape(name='batch_shape')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.cdf(value,name='cdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.copy(**override_parameters_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.dtype
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.entropy(name='entropy')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.event_shape(name='event_shape')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.get_batch_shape()
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.get_event_shape()
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.is_continuous
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.is_reparameterized
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.log_sigma_det(name='log_sigma_det')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.log_survival_function(value, name='log_survival_function',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.mean(name='mean')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.mode(name='mode')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.mu
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.name
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.parameters
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.pdf(value,name='pdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.pmf(value,name='pmf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.prob(value,name='prob', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.sample(sample_shape=(), seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.sample_n(n,seed=None, name='sample_n', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.sigma
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.sigma_det(name='sigma_det')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.std(name='std')
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.survival_function(value, name='survival_function', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.validate_args
tf.contrib.distributions.MultivariateNormalDiagPlusVDVT.variance(name='variance')
class tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.__init__(mu, diag_stdev, validate_args=False, allow_nan_stats=True,name='MultivariateNormalDiagWithSoftplusStdDev')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.allow_nan_stats
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.batch_shape(name='batch_shape')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.cdf(value, name='cdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.copy(**override_parameters_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.dtype
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.entropy(name='entropy')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.event_shape(name='event_shape')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.get_batch_shape()
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.get_event_shape()
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.is_continuous
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.is_reparameterized
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.log_cdf(value, name='log_cdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.log_pdf(value, name='log_pdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.log_pmf(value, name='log_pmf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.log_prob(value, name='log_prob', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.log_sigma_det(name='log_sigma_det')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.log_survival_function(value, name='log_survival_function',**condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.mean(name='mean')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.mode(name='mode')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.mu
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.name
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.param_shapes(cls, sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.parameters
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.pdf(value, name='pdf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.pmf(value, name='pmf', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.prob(value, name='prob', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.sample(sample_shape=(), seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.sample_n(n, seed=None, name='sample_n', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.sigma
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.sigma_det(name='sigma_det')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.std(name='std')
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.survival_function(value, name='survival_function', **condition_kwargs)
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.validate_args
tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev.variance(name='variance')
class tf.contrib.distributions.Dirichlet
tf.contrib.distributions.Dirichlet.__init__(alpha, validate_args=False,allow_nan_stats=True, name='Dirichlet')
tf.contrib.distributions.Dirichlet.allow_nan_stats
tf.contrib.distributions.Dirichlet.alpha
tf.contrib.distributions.Dirichlet.alpha_sum
tf.contrib.distributions.Dirichlet.batch_shape(name='batch_shape')
tf.contrib.distributions.Dirichlet.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Dirichlet.copy(**override_parameters_kwargs)
tf.contrib.distributions.Dirichlet.dtype
tf.contrib.distributions.Dirichlet.entropy(name='entropy')
tf.contrib.distributions.Dirichlet.event_shape(name='event_shape')
tf.contrib.distributions.Dirichlet.get_batch_shape()
tf.contrib.distributions.Dirichlet.get_event_shape()
tf.contrib.distributions.Dirichlet.is_continuous
tf.contrib.distributions.Dirichlet.is_reparameterized
tf.contrib.distributions.Dirichlet.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Dirichlet.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Dirichlet.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Dirichlet.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Dirichlet.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Dirichlet.mean(name='mean')
tf.contrib.distributions.Dirichlet.mode(name='mode')
tf.contrib.distributions.Dirichlet.name
tf.contrib.distributions.Dirichlet.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Dirichlet.param_static_shapes(cls, sample_shape)
tf.contrib.distributions.Dirichlet.parameters
tf.contrib.distributions.Dirichlet.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Dirichlet.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Dirichlet.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Dirichlet.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Dirichlet.sample_n(n, seed=None, name='sample_n',**condition_kwargs)
tf.contrib.distributions.Dirichlet.std(name='std')
tf.contrib.distributions.Dirichlet.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Dirichlet.validate_args
tf.contrib.distributions.Dirichlet.variance(name='variance')
class tf.contrib.distributions.DirichletMultinomial
tf.contrib.distributions.DirichletMultinomial.__init__(n, alpha,validate_args=False, allow_nan_stats=True, name='DirichletMultinomial')
tf.contrib.distributions.DirichletMultinomial.allow_nan_stats
tf.contrib.distributions.DirichletMultinomial.alpha
tf.contrib.distributions.DirichletMultinomial.alpha_sum
tf.contrib.distributions.DirichletMultinomial.batch_shape(name='batch_shape')
tf.contrib.distributions.DirichletMultinomial.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.copy(**override_parameters_kwargs)
tf.contrib.distributions.DirichletMultinomial.dtype
tf.contrib.distributions.DirichletMultinomial.entropy(name='entropy')
tf.contrib.distributions.DirichletMultinomial.event_shape(name='event_shape')
tf.contrib.distributions.DirichletMultinomial.get_batch_shape()
tf.contrib.distributions.DirichletMultinomial.get_event_shape()
tf.contrib.distributions.DirichletMultinomial.is_continuous
tf.contrib.distributions.DirichletMultinomial.is_reparameterized
tf.contrib.distributions.DirichletMultinomial.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.mean(name='mean')
tf.contrib.distributions.DirichletMultinomial.mode(name='mode')
tf.contrib.distributions.DirichletMultinomial.n
tf.contrib.distributions.DirichletMultinomial.name
tf.contrib.distributions.DirichletMultinomial.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.DirichletMultinomial.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.DirichletMultinomial.parameters
tf.contrib.distributions.DirichletMultinomial.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.std(name='std')
tf.contrib.distributions.DirichletMultinomial.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.DirichletMultinomial.validate_args
tf.contrib.distributions.DirichletMultinomial.variance(name='variance')
class tf.contrib.distributions.Multinomial
tf.contrib.distributions.Multinomial.__init__(n, logits=None, p=None,validate_args=False, allow_nan_stats=True, name='Multinomial')
tf.contrib.distributions.Multinomial.allow_nan_stats
tf.contrib.distributions.Multinomial.batch_shape(name='batch_shape')
tf.contrib.distributions.Multinomial.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Multinomial.copy(**override_parameters_kwargs)
tf.contrib.distributions.Multinomial.dtype
tf.contrib.distributions.Multinomial.entropy(name='entropy')
tf.contrib.distributions.Multinomial.event_shape(name='event_shape')
tf.contrib.distributions.Multinomial.get_batch_shape()
tf.contrib.distributions.Multinomial.get_event_shape()
tf.contrib.distributions.Multinomial.is_continuous
tf.contrib.distributions.Multinomial.is_reparameterized
tf.contrib.distributions.Multinomial.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Multinomial.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Multinomial.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Multinomial.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Multinomial.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Multinomial.logits
tf.contrib.distributions.Multinomial.mean(name='mean')
tf.contrib.distributions.Multinomial.mode(name='mode')
tf.contrib.distributions.Multinomial.n
tf.contrib.distributions.Multinomial.name
tf.contrib.distributions.Multinomial.p
tf.contrib.distributions.Multinomial.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Multinomial.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.Multinomial.parameters
tf.contrib.distributions.Multinomial.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Multinomial.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Multinomial.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Multinomial.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Multinomial.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.Multinomial.std(name='std')
tf.contrib.distributions.Multinomial.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Multinomial.validate_args
tf.contrib.distributions.Multinomial.variance(name='variance')
class tf.contrib.distributions.WishartCholesky
tf.contrib.distributions.WishartCholesky.__init__(df, scale,cholesky_input_output_matrices=False, validate_args=False,allow_nan_stats=True, name='WishartCholesky')
tf.contrib.distributions.WishartCholesky.allow_nan_stats
tf.contrib.distributions.WishartCholesky.batch_shape(name='batch_shape')
tf.contrib.distributions.WishartCholesky.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.WishartCholesky.cholesky_input_output_matrices
tf.contrib.distributions.WishartCholesky.copy(**override_parameters_kwargs)
tf.contrib.distributions.WishartCholesky.df
tf.contrib.distributions.WishartCholesky.dimension
tf.contrib.distributions.WishartCholesky.dtype
tf.contrib.distributions.WishartCholesky.entropy(name='entropy')
tf.contrib.distributions.WishartCholesky.event_shape(name='event_shape')
tf.contrib.distributions.WishartCholesky.get_batch_shape()
tf.contrib.distributions.WishartCholesky.get_event_shape()
tf.contrib.distributions.WishartCholesky.is_continuous
tf.contrib.distributions.WishartCholesky.is_reparameterized
tf.contrib.distributions.WishartCholesky.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.WishartCholesky.log_normalizing_constant(name='log_normalizing_constant')
tf.contrib.distributions.WishartCholesky.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.WishartCholesky.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.WishartCholesky.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.WishartCholesky.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.WishartCholesky.mean(name='mean')
tf.contrib.distributions.WishartCholesky.mean_log_det(name='mean_log_det')
tf.contrib.distributions.WishartCholesky.mode(name='mode')
tf.contrib.distributions.WishartCholesky.name
tf.contrib.distributions.WishartCholesky.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.WishartCholesky.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.WishartCholesky.parameters
tf.contrib.distributions.WishartCholesky.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.WishartCholesky.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.WishartCholesky.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.WishartCholesky.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.WishartCholesky.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.WishartCholesky.scale()
tf.contrib.distributions.WishartCholesky.scale_operator_pd
tf.contrib.distributions.WishartCholesky.std(name='std')
tf.contrib.distributions.WishartCholesky.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.WishartCholesky.validate_args
tf.contrib.distributions.WishartCholesky.variance(name='variance')
class tf.contrib.distributions.WishartFull
tf.contrib.distributions.WishartFull.__init__(df, scale,cholesky_input_output_matrices=False, validate_args=False,allow_nan_stats=True, name='WishartFull')
tf.contrib.distributions.WishartFull.allow_nan_stats
tf.contrib.distributions.WishartFull.batch_shape(name='batch_shape')
tf.contrib.distributions.WishartFull.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.WishartFull.cholesky_input_output_matrices
tf.contrib.distributions.WishartFull.copy(**override_parameters_kwargs)
tf.contrib.distributions.WishartFull.df
tf.contrib.distributions.WishartFull.dimension
tf.contrib.distributions.WishartFull.dtype
tf.contrib.distributions.WishartFull.entropy(name='entropy')
tf.contrib.distributions.WishartFull.event_shape(name='event_shape')
tf.contrib.distributions.WishartFull.get_batch_shape()
tf.contrib.distributions.WishartFull.get_event_shape()
tf.contrib.distributions.WishartFull.is_continuous
tf.contrib.distributions.WishartFull.is_reparameterized
tf.contrib.distributions.WishartFull.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.WishartFull.log_normalizing_constant(name='log_normalizing_constant')
tf.contrib.distributions.WishartFull.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.WishartFull.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.WishartFull.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.WishartFull.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.WishartFull.mean(name='mean')
tf.contrib.distributions.WishartFull.mean_log_det(name='mean_log_det')
tf.contrib.distributions.WishartFull.mode(name='mode')
tf.contrib.distributions.WishartFull.name
tf.contrib.distributions.WishartFull.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.WishartFull.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.WishartFull.parameters
tf.contrib.distributions.WishartFull.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.WishartFull.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.WishartFull.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.WishartFull.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.WishartFull.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.WishartFull.scale()
tf.contrib.distributions.WishartFull.scale_operator_pd
tf.contrib.distributions.WishartFull.std(name='std')
tf.contrib.distributions.WishartFull.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.WishartFull.validate_args
tf.contrib.distributions.WishartFull.variance(name='variance')
tf.contrib.distributions.matrix_diag_transform(matrix, transform=None,name=None)
class tf.contrib.distributions.TransformedDistribution
tf.contrib.distributions.TransformedDistribution.__init__(distribution,bijector, validate_args=False, name=None)
tf.contrib.distributions.TransformedDistribution.allow_nan_stats
tf.contrib.distributions.TransformedDistribution.batch_shape(name='batch_shape')
tf.contrib.distributions.TransformedDistribution.bijector
tf.contrib.distributions.TransformedDistribution.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.TransformedDistribution.copy(**override_parameters_kwargs)
tf.contrib.distributions.TransformedDistribution.distribution
tf.contrib.distributions.TransformedDistribution.dtype
tf.contrib.distributions.TransformedDistribution.entropy(name='entropy')
tf.contrib.distributions.TransformedDistribution.event_shape(name='event_shape')
tf.contrib.distributions.TransformedDistribution.get_batch_shape()
tf.contrib.distributions.TransformedDistribution.get_event_shape()
tf.contrib.distributions.TransformedDistribution.is_continuous
tf.contrib.distributions.TransformedDistribution.is_reparameterized
tf.contrib.distributions.TransformedDistribution.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.TransformedDistribution.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.TransformedDistribution.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.TransformedDistribution.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.TransformedDistribution.log_survival_function(value, name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.TransformedDistribution.mean(name='mean')
tf.contrib.distributions.TransformedDistribution.mode(name='mode')
tf.contrib.distributions.TransformedDistribution.name
tf.contrib.distributions.TransformedDistribution.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.TransformedDistribution.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.TransformedDistribution.parameters
tf.contrib.distributions.TransformedDistribution.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.TransformedDistribution.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.TransformedDistribution.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.TransformedDistribution.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.TransformedDistribution.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.TransformedDistribution.std(name='std')
tf.contrib.distributions.TransformedDistribution.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.TransformedDistribution.validate_args
tf.contrib.distributions.TransformedDistribution.variance(name='variance')
class tf.contrib.distributions.QuantizedDistribution
tf.contrib.distributions.QuantizedDistribution.__init__(distribution,lower_cutoff=None, upper_cutoff=None, validate_args=False,name='QuantizedDistribution')
tf.contrib.distributions.QuantizedDistribution.allow_nan_stats
tf.contrib.distributions.QuantizedDistribution.batch_shape(name='batch_shape')
tf.contrib.distributions.QuantizedDistribution.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.copy(**override_parameters_kwargs)
tf.contrib.distributions.QuantizedDistribution.distribution
tf.contrib.distributions.QuantizedDistribution.dtype
tf.contrib.distributions.QuantizedDistribution.entropy(name='entropy')
tf.contrib.distributions.QuantizedDistribution.event_shape(name='event_shape')
tf.contrib.distributions.QuantizedDistribution.get_batch_shape()
tf.contrib.distributions.QuantizedDistribution.get_event_shape()
tf.contrib.distributions.QuantizedDistribution.is_continuous
tf.contrib.distributions.QuantizedDistribution.is_reparameterized
tf.contrib.distributions.QuantizedDistribution.log_cdf(value,name='log_cdf', **condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.log_pdf(value,name='log_pdf', **condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.log_pmf(value,name='log_pmf', **condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.log_prob(value,name='log_prob', **condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.log_survival_function(value, name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.mean(name='mean')
tf.contrib.distributions.QuantizedDistribution.mode(name='mode')
tf.contrib.distributions.QuantizedDistribution.name
tf.contrib.distributions.QuantizedDistribution.param_shapes(cls,sample_shape, name='DistributionParamShapes')
tf.contrib.distributions.QuantizedDistribution.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.QuantizedDistribution.parameters
tf.contrib.distributions.QuantizedDistribution.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.sample(sample_shape=(),seed=None, name='sample', **condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.std(name='std')
tf.contrib.distributions.QuantizedDistribution.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.QuantizedDistribution.validate_args
tf.contrib.distributions.QuantizedDistribution.variance(name='variance')
class tf.contrib.distributions.Mixture
tf.contrib.distributions.Mixture.__init__(cat, components,validate_args=False, allow_nan_stats=True, name='Mixture')
tf.contrib.distributions.Mixture.allow_nan_stats
tf.contrib.distributions.Mixture.batch_shape(name='batch_shape')
tf.contrib.distributions.Mixture.cat
tf.contrib.distributions.Mixture.cdf(value, name='cdf',**condition_kwargs)
tf.contrib.distributions.Mixture.components
tf.contrib.distributions.Mixture.copy(**override_parameters_kwargs)
tf.contrib.distributions.Mixture.dtype
tf.contrib.distributions.Mixture.entropy(name='entropy')
tf.contrib.distributions.Mixture.entropy_lower_bound(name='entropy_lower_bound')
tf.contrib.distributions.Mixture.event_shape(name='event_shape')
tf.contrib.distributions.Mixture.get_batch_shape()
tf.contrib.distributions.Mixture.get_event_shape()
tf.contrib.distributions.Mixture.is_continuous
tf.contrib.distributions.Mixture.is_reparameterized
tf.contrib.distributions.Mixture.log_cdf(value, name='log_cdf',**condition_kwargs)
tf.contrib.distributions.Mixture.log_pdf(value, name='log_pdf',**condition_kwargs)
tf.contrib.distributions.Mixture.log_pmf(value, name='log_pmf',**condition_kwargs)
tf.contrib.distributions.Mixture.log_prob(value, name='log_prob',**condition_kwargs)
tf.contrib.distributions.Mixture.log_survival_function(value,name='log_survival_function', **condition_kwargs)
tf.contrib.distributions.Mixture.mean(name='mean')
tf.contrib.distributions.Mixture.mode(name='mode')
tf.contrib.distributions.Mixture.name
tf.contrib.distributions.Mixture.num_components
tf.contrib.distributions.Mixture.param_shapes(cls, sample_shape,name='DistributionParamShapes')
tf.contrib.distributions.Mixture.param_static_shapes(cls,sample_shape)
tf.contrib.distributions.Mixture.parameters
tf.contrib.distributions.Mixture.pdf(value, name='pdf',**condition_kwargs)
tf.contrib.distributions.Mixture.pmf(value, name='pmf',**condition_kwargs)
tf.contrib.distributions.Mixture.prob(value, name='prob',**condition_kwargs)
tf.contrib.distributions.Mixture.sample(sample_shape=(), seed=None,name='sample', **condition_kwargs)
tf.contrib.distributions.Mixture.sample_n(n, seed=None,name='sample_n', **condition_kwargs)
tf.contrib.distributions.Mixture.std(name='std')
tf.contrib.distributions.Mixture.survival_function(value,name='survival_function', **condition_kwargs)
tf.contrib.distributions.Mixture.validate_args
tf.contrib.distributions.Mixture.variance(name='variance')
tf.contrib.distributions.normal_conjugates_known_sigma_posterior(prior, sigma, s, n)
tf.contrib.distributions.normal_conjugates_known_sigma_predictive(prior, sigma, s, n)
tf.contrib.distributions.kl(dist_a, dist_b,allow_nan=False, name=None)
class tf.contrib.distributions.RegisterKL
tf.contrib.distributions.RegisterKL.__call__(kl_fn)
tf.contrib.distributions.RegisterKL.__init__(dist_cls_a,dist_cls_b)
class tf.contrib.distributions.bijector.Bijector
tf.contrib.distributions.bijector.Bijector.__init__(batch_ndims=None,event_ndims=None, parameters=None, is_constant_jacobian=False,validate_args=False, dtype=None, name=None)
tf.contrib.distributions.bijector.Bijector.dtype
tf.contrib.distributions.bijector.Bijector.forward(x, name='forward',**condition_kwargs)
tf.contrib.distributions.bijector.Bijector.forward_event_shape(input_shape, name='forward_event_shape')
tf.contrib.distributions.bijector.Bijector.forward_log_det_jacobian(x,name='forward_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Bijector.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.Bijector.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.Bijector.inverse(y, name='inverse',**condition_kwargs)
tf.contrib.distributions.bijector.Bijector.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Bijector.inverse_event_shape(output_shape, name='inverse_event_shape')
tf.contrib.distributions.bijector.Bijector.inverse_log_det_jacobian(y,name='inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Bijector.is_constant_jacobian
tf.contrib.distributions.bijector.Bijector.name
tf.contrib.distributions.bijector.Bijector.parameters
tf.contrib.distributions.bijector.Bijector.shaper
tf.contrib.distributions.bijector.Bijector.validate_args
class tf.contrib.distributions.bijector.Chain
tf.contrib.distributions.bijector.Chain.__init__(bijectors=(),validate_args=False, name=None)
tf.contrib.distributions.bijector.Chain.bijectors
tf.contrib.distributions.bijector.Chain.dtype
tf.contrib.distributions.bijector.Chain.forward(x, name='forward',**condition_kwargs)
tf.contrib.distributions.bijector.Chain.forward_event_shape(input_shape,name='forward_event_shape')
tf.contrib.distributions.bijector.Chain.forward_log_det_jacobian(x,name='forward_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Chain.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.Chain.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.Chain.inverse(y, name='inverse',**condition_kwargs)
tf.contrib.distributions.bijector.Chain.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Chain.inverse_event_shape(output_shape,name='inverse_event_shape')
tf.contrib.distributions.bijector.Chain.inverse_log_det_jacobian(y,name='inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Chain.is_constant_jacobian
tf.contrib.distributions.bijector.Chain.name
tf.contrib.distributions.bijector.Chain.parameters
tf.contrib.distributions.bijector.Chain.shaper
tf.contrib.distributions.bijector.Chain.validate_args
class tf.contrib.distributions.bijector.CholeskyOuterProduct
tf.contrib.distributions.bijector.CholeskyOuterProduct.__init__(event_ndims=2, validate_args=False, name='cholesky_outer_product')
tf.contrib.distributions.bijector.CholeskyOuterProduct.dtype
tf.contrib.distributions.bijector.CholeskyOuterProduct.forward(x,name='forward', **condition_kwargs)
tf.contrib.distributions.bijector.CholeskyOuterProduct.forward_event_shape(input_shape, name='forward_event_shape')
tf.contrib.distributions.bijector.CholeskyOuterProduct.forward_log_det_jacobian(x, name='forward_log_det_jacobian',**condition_kwargs)
tf.contrib.distributions.bijector.CholeskyOuterProduct.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.CholeskyOuterProduct.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.CholeskyOuterProduct.inverse(y,name='inverse', **condition_kwargs)
tf.contrib.distributions.bijector.CholeskyOuterProduct.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.CholeskyOuterProduct.inverse_event_shape(output_shape, name='inverse_event_shape')
tf.contrib.distributions.bijector.CholeskyOuterProduct.inverse_log_det_jacobian(y, name='inverse_log_det_jacobian',**condition_kwargs)
tf.contrib.distributions.bijector.CholeskyOuterProduct.is_constant_jacobian
tf.contrib.distributions.bijector.CholeskyOuterProduct.name
tf.contrib.distributions.bijector.CholeskyOuterProduct.parameters
tf.contrib.distributions.bijector.CholeskyOuterProduct.shaper
tf.contrib.distributions.bijector.CholeskyOuterProduct.validate_args
class tf.contrib.distributions.bijector.Exp
tf.contrib.distributions.bijector.Exp.__init__(event_ndims=0,validate_args=False, name='exp')
tf.contrib.distributions.bijector.Exp.dtype
tf.contrib.distributions.bijector.Exp.forward(x, name='forward',**condition_kwargs)
tf.contrib.distributions.bijector.Exp.forward_event_shape(input_shape,name='forward_event_shape')
tf.contrib.distributions.bijector.Exp.forward_log_det_jacobian(x,name='forward_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Exp.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.Exp.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.Exp.inverse(y, name='inverse',**condition_kwargs)
tf.contrib.distributions.bijector.Exp.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Exp.inverse_event_shape(output_shape,name='inverse_event_shape')
tf.contrib.distributions.bijector.Exp.inverse_log_det_jacobian(y,name='inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Exp.is_constant_jacobian
tf.contrib.distributions.bijector.Exp.name
tf.contrib.distributions.bijector.Exp.parameters
tf.contrib.distributions.bijector.Exp.shaper
tf.contrib.distributions.bijector.Exp.validate_args
class tf.contrib.distributions.bijector.Identity
tf.contrib.distributions.bijector.Identity.__init__(validate_args=False,name='identity')
tf.contrib.distributions.bijector.Identity.dtype
tf.contrib.distributions.bijector.Identity.forward(x, name='forward',**condition_kwargs)
tf.contrib.distributions.bijector.Identity.forward_event_shape(input_shape, name='forward_event_shape')
tf.contrib.distributions.bijector.Identity.forward_log_det_jacobian(x,name='forward_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Identity.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.Identity.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.Identity.inverse(y, name='inverse',**condition_kwargs)
tf.contrib.distributions.bijector.Identity.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Identity.inverse_event_shape(output_shape, name='inverse_event_shape')
tf.contrib.distributions.bijector.Identity.inverse_log_det_jacobian(y,name='inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Identity.is_constant_jacobian
tf.contrib.distributions.bijector.Identity.name
tf.contrib.distributions.bijector.Identity.parameters
tf.contrib.distributions.bijector.Identity.shaper
tf.contrib.distributions.bijector.Identity.validate_args
class tf.contrib.distributions.bijector.Inline
tf.contrib.distributions.bijector.Inline.__init__(forward_fn=None,inverse_fn=None, inverse_log_det_jacobian_fn=None,forward_log_det_jacobian_fn=None, get_forward_event_shape_fn=None,forward_event_shape_fn=None, get_inverse_event_shape_fn=None,inverse_event_shape_fn=None, is_constant_jacobian=False,validate_args=False, name='inline')
tf.contrib.distributions.bijector.Inline.dtype
tf.contrib.distributions.bijector.Inline.forward(x, name='forward',**condition_kwargs)
tf.contrib.distributions.bijector.Inline.forward_event_shape(input_shape,name='forward_event_shape')
tf.contrib.distributions.bijector.Inline.forward_log_det_jacobian(x,name='forward_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Inline.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.Inline.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.Inline.inverse(y, name='inverse',**condition_kwargs)
tf.contrib.distributions.bijector.Inline.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Inline.inverse_event_shape(output_shape,name='inverse_event_shape')
tf.contrib.distributions.bijector.Inline.inverse_log_det_jacobian(y,name='inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Inline.is_constant_jacobian
tf.contrib.distributions.bijector.Inline.name
tf.contrib.distributions.bijector.Inline.parameters
tf.contrib.distributions.bijector.Inline.shaper
tf.contrib.distributions.bijector.Inline.validate_args
class tf.contrib.distributions.bijector.Invert
tf.contrib.distributions.bijector.Invert.__init__(bijector,validate_args=False, name=None)
tf.contrib.distributions.bijector.Invert.bijector
tf.contrib.distributions.bijector.Invert.dtype
tf.contrib.distributions.bijector.Invert.forward(x, name='forward',**condition_kwargs)
tf.contrib.distributions.bijector.Invert.forward_event_shape(input_shape,name='forward_event_shape')
tf.contrib.distributions.bijector.Invert.forward_log_det_jacobian(x,name='forward_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Invert.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.Invert.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.Invert.inverse(y, name='inverse',**condition_kwargs)
tf.contrib.distributions.bijector.Invert.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Invert.inverse_event_shape(output_shape,name='inverse_event_shape')
tf.contrib.distributions.bijector.Invert.inverse_log_det_jacobian(y,name='inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Invert.is_constant_jacobian
tf.contrib.distributions.bijector.Invert.name
tf.contrib.distributions.bijector.Invert.parameters
tf.contrib.distributions.bijector.Invert.shaper
tf.contrib.distributions.bijector.Invert.validate_args
class tf.contrib.distributions.bijector.ScaleAndShift
tf.contrib.distributions.bijector.ScaleAndShift.__init__(shift, scale,event_ndims=0, validate_args=False, name='scale_and_shift')
tf.contrib.distributions.bijector.ScaleAndShift.dtype
tf.contrib.distributions.bijector.ScaleAndShift.forward(x, name='forward',**condition_kwargs)
tf.contrib.distributions.bijector.ScaleAndShift.forward_event_shape(input_shape, name='forward_event_shape')
tf.contrib.distributions.bijector.ScaleAndShift.forward_log_det_jacobian(x, name='forward_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.ScaleAndShift.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.ScaleAndShift.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.ScaleAndShift.inverse(y, name='inverse',**condition_kwargs)
tf.contrib.distributions.bijector.ScaleAndShift.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.ScaleAndShift.inverse_event_shape(output_shape, name='inverse_event_shape')
tf.contrib.distributions.bijector.ScaleAndShift.inverse_log_det_jacobian(y, name='inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.ScaleAndShift.is_constant_jacobian
tf.contrib.distributions.bijector.ScaleAndShift.name
tf.contrib.distributions.bijector.ScaleAndShift.parameters
tf.contrib.distributions.bijector.ScaleAndShift.scale
tf.contrib.distributions.bijector.ScaleAndShift.shaper
tf.contrib.distributions.bijector.ScaleAndShift.shift
tf.contrib.distributions.bijector.ScaleAndShift.validate_args
class tf.contrib.distributions.bijector.SigmoidCentered
tf.contrib.distributions.bijector.SigmoidCentered.__init__(validate_args=False, name='sigmoid_centered')
tf.contrib.distributions.bijector.SigmoidCentered.dtype
tf.contrib.distributions.bijector.SigmoidCentered.forward(x,name='forward', **condition_kwargs)
tf.contrib.distributions.bijector.SigmoidCentered.forward_event_shape(input_shape, name='forward_event_shape')
tf.contrib.distributions.bijector.SigmoidCentered.forward_log_det_jacobian(x, name='forward_log_det_jacobian',**condition_kwargs)
tf.contrib.distributions.bijector.SigmoidCentered.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.SigmoidCentered.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.SigmoidCentered.inverse(y,name='inverse', **condition_kwargs)
tf.contrib.distributions.bijector.SigmoidCentered.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.SigmoidCentered.inverse_event_shape(output_shape, name='inverse_event_shape')
tf.contrib.distributions.bijector.SigmoidCentered.inverse_log_det_jacobian(y, name='inverse_log_det_jacobian',**condition_kwargs)
tf.contrib.distributions.bijector.SigmoidCentered.is_constant_jacobian
tf.contrib.distributions.bijector.SigmoidCentered.name
tf.contrib.distributions.bijector.SigmoidCentered.parameters
tf.contrib.distributions.bijector.SigmoidCentered.shaper
tf.contrib.distributions.bijector.SigmoidCentered.validate_args
class tf.contrib.distributions.bijector.SoftmaxCentered
tf.contrib.distributions.bijector.SoftmaxCentered.__init__(event_ndims=0,validate_args=False, name='softmax_centered')
tf.contrib.distributions.bijector.SoftmaxCentered.dtype
tf.contrib.distributions.bijector.SoftmaxCentered.forward(x,name='forward', **condition_kwargs)
tf.contrib.distributions.bijector.SoftmaxCentered.forward_event_shape(input_shape, name='forward_event_shape')
tf.contrib.distributions.bijector.SoftmaxCentered.forward_log_det_jacobian(x, name='forward_log_det_jacobian',**condition_kwargs)
tf.contrib.distributions.bijector.SoftmaxCentered.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.SoftmaxCentered.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.SoftmaxCentered.inverse(y,name='inverse', **condition_kwargs)
tf.contrib.distributions.bijector.SoftmaxCentered.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.SoftmaxCentered.inverse_event_shape(output_shape, name='inverse_event_shape')
tf.contrib.distributions.bijector.SoftmaxCentered.inverse_log_det_jacobian(y, name='inverse_log_det_jacobian',**condition_kwargs)
tf.contrib.distributions.bijector.SoftmaxCentered.is_constant_jacobian
tf.contrib.distributions.bijector.SoftmaxCentered.name
tf.contrib.distributions.bijector.SoftmaxCentered.parameters
tf.contrib.distributions.bijector.SoftmaxCentered.shaper
tf.contrib.distributions.bijector.SoftmaxCentered.validate_args
class tf.contrib.distributions.bijector.Softplus
tf.contrib.distributions.bijector.Softplus.__init__(event_ndims=0,validate_args=False, name='softplus')
tf.contrib.distributions.bijector.Softplus.dtype
tf.contrib.distributions.bijector.Softplus.forward(x, name='forward',**condition_kwargs)
tf.contrib.distributions.bijector.Softplus.forward_event_shape(input_shape, name='forward_event_shape')
tf.contrib.distributions.bijector.Softplus.forward_log_det_jacobian(x,name='forward_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Softplus.get_forward_event_shape(input_shape)
tf.contrib.distributions.bijector.Softplus.get_inverse_event_shape(output_shape)
tf.contrib.distributions.bijector.Softplus.inverse(y, name='inverse',**condition_kwargs)
tf.contrib.distributions.bijector.Softplus.inverse_and_inverse_log_det_jacobian(y,name='inverse_and_inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Softplus.inverse_event_shape(output_shape, name='inverse_event_shape')
tf.contrib.distributions.bijector.Softplus.inverse_log_det_jacobian(y,name='inverse_log_det_jacobian', **condition_kwargs)
tf.contrib.distributions.bijector.Softplus.is_constant_jacobian
tf.contrib.distributions.bijector.Softplus.name
tf.contrib.distributions.bijector.Softplus.parameters
tf.contrib.distributions.bijector.Softplus.shaper
tf.contrib.distributions.bijector.Softplus.validate_args
tf.contrib.ffmpeg.decode_audio(contents, file_format=None,samples_per_second=None, channel_count=None)
tf.contrib.ffmpeg.encode_audio(audio, file_format=None,samples_per_second=None)
tf.contrib.framework.assert_same_float_dtype(tensors=None,dtype=None)
tf.contrib.framework.assert_scalar_int(tensor)
tf.contrib.framework.convert_to_tensor_or_sparse_tensor(value,dtype=None, name=None, as_ref=False)
tf.contrib.framework.get_graph_from_inputs(op_input_list,graph=None)
tf.is_numeric_tensor(tensor)
tf.is_non_decreasing(x, name=None)
tf.is_strictly_increasing(x, name=None)
tf.contrib.framework.is_tensor(x)
tf.contrib.framework.reduce_sum_n(tensors, name=None)
tf.contrib.framework.with_shape(expected_shape, tensor)
tf.contrib.framework.with_same_shape(expected_tensor, tensor)
tf.contrib.framework.deprecated(date, instructions)
tf.contrib.framework.deprecated_args(date, instructions,*deprecated_arg_names)
tf.contrib.framework.deprecated_arg_values(date,instructions, **deprecated_kwargs)
tf.contrib.framework.arg_scope(list_ops_or_scope,**kwargs)
tf.contrib.framework.add_arg_scope(func)
tf.contrib.framework.has_arg_scope(func)
tf.contrib.framework.arg_scoped_arguments(func)
tf.contrib.framework.add_model_variable(var)
tf.train.assert_global_step(global_step_tensor)
tf.contrib.framework.assert_or_get_global_step(graph=None,global_step_tensor=None)
tf.contrib.framework.assign_from_checkpoint(model_path, var_list)
tf.contrib.framework.assign_from_checkpoint_fn(model_path,var_list, ignore_missing_vars=False, reshape_variables=False)
tf.contrib.framework.assign_from_values(var_names_to_values)
tf.contrib.framework.assign_from_values_fn(var_names_to_values)
tf.contrib.framework.create_global_step(graph=None)
tf.train.get_global_step(graph=None)
tf.contrib.framework.get_or_create_global_step(graph=None)
tf.contrib.framework.get_local_variables(scope=None, suffix=None)
tf.contrib.framework.get_model_variables(scope=None, suffix=None)
tf.contrib.framework.get_unique_variable(var_op_name)
tf.contrib.framework.get_variables_by_name(given_name, scope=None)
tf.contrib.framework.get_variables_by_suffix(suffix, scope=None)
tf.contrib.framework.get_variables_to_restore(include=None,exclude=None)
tf.contrib.framework.get_variables(scope=None, suffix=None,collection='variables')
tf.contrib.framework.local_variable(initial_value,validate_shape=True, name=None)
tf.contrib.framework.model_variable(*args, **kwargs)
tf.contrib.framework.variable(*args, **kwargs)
class tf.contrib.framework.VariableDeviceChooser
tf.contrib.framework.VariableDeviceChooser.__call__(op)
tf.contrib.framework.VariableDeviceChooser.__init__(num_tasks=0,job_name='ps', device_type='CPU', device_index=0)
tf.contrib.framework.zero_initializer(ref, use_locking=True,name='zero_initializer')
tf.contrib.graph_editor.make_list_of_op(ops, check_graph=True,allow_graph=True, ignore_ts=False)
tf.contrib.graph_editor.get_tensors(graph)
tf.contrib.graph_editor.make_list_of_t(ts, check_graph=True,allow_graph=True, ignore_ops=False)
tf.contrib.graph_editor.get_generating_ops(ts)
tf.contrib.graph_editor.get_consuming_ops(ts)
class tf.contrib.graph_editor.ControlOutputs
tf.contrib.graph_editor.ControlOutputs.__init__(graph)
tf.contrib.graph_editor.ControlOutputs.get(op)
tf.contrib.graph_editor.ControlOutputs.get_all()
tf.contrib.graph_editor.ControlOutputs.graph
tf.contrib.graph_editor.ControlOutputs.update()
tf.contrib.graph_editor.placeholder_name(t=None, scope=None)
tf.contrib.graph_editor.make_placeholder_from_tensor(t,scope=None)
tf.contrib.graph_editor.make_placeholder_from_dtype_and_shape(dtype, shape=None, scope=None)
tf.contrib.graph_editor.filter_ts(ops, positive_filter)
tf.contrib.graph_editor.filter_ts_from_regex(ops, regex)
tf.contrib.graph_editor.filter_ops(ops, positive_filter)
tf.contrib.graph_editor.filter_ops_from_regex(ops, regex)
tf.contrib.graph_editor.get_name_scope_ops(ops, scope)
tf.contrib.graph_editor.check_cios(control_inputs=False,control_outputs=None, control_ios=None)
tf.contrib.graph_editor.get_ops_ios(ops, control_inputs=False,control_outputs=None, control_ios=None)
tf.contrib.graph_editor.compute_boundary_ts(ops,ambiguous_ts_are_outputs=True)
tf.contrib.graph_editor.get_within_boundary_ops(ops, seed_ops,boundary_ops=(), inclusive=True, control_inputs=False,control_outputs=None, control_ios=None)
tf.contrib.graph_editor.get_forward_walk_ops(seed_ops, inclusive=True,within_ops=None, stop_at_ts=(), control_outputs=None)
tf.contrib.graph_editor.get_backward_walk_ops(seed_ops, inclusive=True,within_ops=None, stop_at_ts=(), control_inputs=False)
tf.contrib.graph_editor.get_walks_intersection_ops(forward_seed_ops,backward_seed_ops, forward_inclusive=True, backward_inclusive=True,within_ops=None, control_inputs=False, control_outputs=None,control_ios=None)
tf.contrib.graph_editor.get_walks_union_ops(forward_seed_ops,backward_seed_ops, forward_inclusive=True, backward_inclusive=True,within_ops=None, control_inputs=False, control_outputs=None,control_ios=None)
tf.contrib.graph_editor.select_ops(*args, **kwargs)
tf.contrib.graph_editor.select_ts(*args, **kwargs)
tf.contrib.graph_editor.select_ops_and_ts(*args, **kwargs)
class tf.contrib.graph_editor.SubGraphView
tf.contrib.graph_editor.SubGraphView.__bool__()
tf.contrib.graph_editor.SubGraphView.__copy__()
tf.contrib.graph_editor.SubGraphView.__enter__()
tf.contrib.graph_editor.SubGraphView.__exit__(exc_type,exc_value, traceback)
tf.contrib.graph_editor.SubGraphView.__init__(inside_ops=(),passthrough_ts=())
tf.contrib.graph_editor.SubGraphView.__nonzero__()
tf.contrib.graph_editor.SubGraphView.__str__()
tf.contrib.graph_editor.SubGraphView.connected_inputs
tf.contrib.graph_editor.SubGraphView.connected_outputs
tf.contrib.graph_editor.SubGraphView.consumers()
tf.contrib.graph_editor.SubGraphView.copy()
tf.contrib.graph_editor.SubGraphView.find_op_by_name(op_name)
tf.contrib.graph_editor.SubGraphView.graph
tf.contrib.graph_editor.SubGraphView.input_index(t)
tf.contrib.graph_editor.SubGraphView.inputs
tf.contrib.graph_editor.SubGraphView.is_passthrough(t)
tf.contrib.graph_editor.SubGraphView.op(op_id)
tf.contrib.graph_editor.SubGraphView.ops
tf.contrib.graph_editor.SubGraphView.output_index(t)
tf.contrib.graph_editor.SubGraphView.outputs
tf.contrib.graph_editor.SubGraphView.passthroughs
tf.contrib.graph_editor.SubGraphView.remap(new_input_indices=None, new_output_indices=None)
tf.contrib.graph_editor.SubGraphView.remap_default(remove_input_map=True, remove_output_map=True)
tf.contrib.graph_editor.SubGraphView.remap_inputs(new_input_indices)
tf.contrib.graph_editor.SubGraphView.remap_outputs(new_output_indices)
tf.contrib.graph_editor.SubGraphView.remap_outputs_make_unique()
tf.contrib.graph_editor.SubGraphView.remap_outputs_to_consumers()
tf.contrib.graph_editor.SubGraphView.remove_unused_ops(control_inputs=True)
tf.contrib.graph_editor.make_view(*args, **kwargs)
tf.contrib.graph_editor.make_view_from_scope(scope, graph)
tf.contrib.graph_editor.swap_ts(ts0, ts1, can_modify=None,cannot_modify=None)
tf.contrib.graph_editor.reroute_a2b_ts(ts0, ts1,can_modify=None, cannot_modify=None)
tf.contrib.graph_editor.reroute_b2a_ts(ts0, ts1,can_modify=None, cannot_modify=None)
tf.contrib.graph_editor.swap_inputs(sgv0, sgv1)
tf.contrib.graph_editor.reroute_a2b_inputs(sgv0, sgv1)
tf.contrib.graph_editor.reroute_b2a_inputs(sgv0, sgv1)
tf.contrib.graph_editor.swap_outputs(sgv0, sgv1)
tf.contrib.graph_editor.reroute_a2b_outputs(sgv0, sgv1)
tf.contrib.graph_editor.reroute_b2a_outputs(sgv0, sgv1)
tf.contrib.graph_editor.swap(sgv0, sgv1)
tf.contrib.graph_editor.reroute_a2b(sgv0, sgv1)
tf.contrib.graph_editor.reroute_b2a(sgv0, sgv1)
tf.contrib.graph_editor.remove_control_inputs(op, cops)
tf.contrib.graph_editor.add_control_inputs(op, cops)
tf.contrib.graph_editor.detach_control_inputs(sgv)
tf.contrib.graph_editor.detach_control_outputs(sgv,control_outputs)
tf.contrib.graph_editor.detach_inputs(sgv, control_inputs=False)
tf.contrib.graph_editor.detach_outputs(sgv, control_outputs=None)
tf.contrib.graph_editor.detach(sgv, control_inputs=False,control_outputs=None, control_ios=None)
tf.contrib.graph_editor.connect(sgv0, sgv1,disconnect_first=False)
tf.contrib.graph_editor.bypass(sgv)
tf.contrib.graph_editor.replace_t_with_placeholder_handler(info, t)
tf.contrib.graph_editor.keep_t_if_possible_handler(info, t)
tf.contrib.graph_editor.assign_renamed_collections_handler(info, elem,elem_)
tf.contrib.graph_editor.transform_op_if_inside_handler(info, op,keep_if_possible=True)
tf.contrib.graph_editor.copy_op_handler(info, op, copy_shape=True)
tf.contrib.graph_editor.transform_op_in_place(info, op,detach_outputs=False)
class tf.contrib.graph_editor.Transformer
tf.contrib.graph_editor.Transformer.__call__(sgv, dst_graph,dst_scope, src_scope='', reuse_dst_scope=False)
tf.contrib.graph_editor.Transformer.__init__()
tf.contrib.graph_editor.Transformer.new_name(name)
tf.contrib.graph_editor.copy(sgv, dst_graph=None, dst_scope='',src_scope='', reuse_dst_scope=False)
tf.contrib.graph_editor.copy_with_input_replacements(sgv,replacement_ts, dst_graph=None, dst_scope='', src_scope='',reuse_dst_scope=False)
tf.contrib.graph_editor.graph_replace(target_ts, replacement_ts,dst_scope='', src_scope='', reuse_dst_scope=False)
tf.contrib.graph_editor.op_type(op_types, op=None)
class tf.contrib.graph_editor.OpMatcher
tf.contrib.graph_editor.OpMatcher.__call__(op)
tf.contrib.graph_editor.OpMatcher.__init__(positive_filter)
tf.contrib.graph_editor.OpMatcher.control_input_ops(*args)
tf.contrib.graph_editor.OpMatcher.input_ops(*args)
tf.contrib.graph_editor.OpMatcher.output_ops(*args)
tf.contrib.graph_editor.ph(dtype, shape=None,scope=None)
tf.contrib.graph_editor.sgv(*args, **kwargs)
tf.contrib.graph_editor.sgv_scope(scope, graph)
tf.contrib.graph_editor.ts(*args, **kwargs)
tf.contrib.graph_editor.ops(*args, **kwargs)
class tf.contrib.graph_editor.matcher
tf.contrib.graph_editor.matcher.__call__(op)
tf.contrib.graph_editor.matcher.__init__(positive_filter)
tf.contrib.graph_editor.matcher.control_input_ops(*args)
tf.contrib.graph_editor.matcher.input_ops(*args)
tf.contrib.graph_editor.matcher.output_ops(*args)
tf.contrib.integrate.odeint(func, y0, t, rtol=1e-06, atol=1e-12,method=None, options=None, full_output=False, name=None)
tf.contrib.layers.avg_pool2d(*args, **kwargs)
tf.contrib.layers.batch_norm(*args, **kwargs)
tf.contrib.layers.convolution2d(*args, **kwargs)
tf.contrib.layers.convolution2d_in_plane(*args, **kwargs)
tf.contrib.layers.convolution2d_transpose(*args, **kwargs)
tf.contrib.layers.flatten(*args, **kwargs)
tf.contrib.layers.fully_connected(*args, **kwargs)
tf.contrib.layers.layer_norm(*args, **kwargs)
tf.contrib.layers.max_pool2d(*args, **kwargs)
tf.contrib.layers.one_hot_encoding(*args, **kwargs)
tf.contrib.layers.repeat(inputs, repetitions, layer, *args, **kwargs)
tf.contrib.layers.safe_embedding_lookup_sparse(embedding_weights,sparse_ids, sparse_weights=None, combiner=None, default_id=None,name=None, partition_strategy='div', max_norm=None)
tf.contrib.layers.separable_convolution2d(*args, **kwargs)
tf.stack(values, axis=0, name='stack')
tf.contrib.layers.unit_norm(*args, **kwargs)
tf.contrib.layers.apply_regularization(regularizer,weights_list=None)
tf.contrib.layers.l1_regularizer(scale, scope=None)
tf.contrib.layers.l2_regularizer(scale, scope=None)
tf.contrib.layers.sum_regularizer(regularizer_list,scope=None)
tf.contrib.layers.xavier_initializer(uniform=True, seed=None,dtype=tf.float32)
tf.contrib.layers.xavier_initializer_conv2d(uniform=True, seed=None,dtype=tf.float32)
tf.contrib.layers.variance_scaling_initializer(factor=2.0,mode='FAN_IN', uniform=False, seed=None, dtype=tf.float32)
tf.contrib.layers.optimize_loss(loss, global_step, learning_rate,optimizer, gradient_noise_scale=None, gradient_multipliers=None,clip_gradients=None, learning_rate_decay_fn=None, update_ops=None,variables=None, name=None, summaries=None,colocate_gradients_with_ops=False)
tf.contrib.layers.summarize_activation(op)
tf.contrib.layers.summarize_tensor(tensor, tag=None)
tf.contrib.layers.summarize_tensors(tensors,summarizer=summarize_tensor)
tf.contrib.layers.summarize_collection(collection,name_filter=None, summarizer=summarize_tensor)
tf.contrib.layers.summarize_activations(name_filter=None,summarizer=summarize_activation)
tf.contrib.layers.bucketized_column(source_column, boundaries)
tf.contrib.layers.check_feature_columns(feature_columns)
tf.contrib.layers.create_feature_spec_for_parsing(feature_columns)
tf.contrib.layers.crossed_column(columns, hash_bucket_size, combiner=None,ckpt_to_load_from=None, tensor_name_in_ckpt=None, hash_key=None)
tf.contrib.layers.embedding_column(sparse_id_column, dimension,combiner=None, initializer=None, ckpt_to_load_from=None,tensor_name_in_ckpt=None)
tf.contrib.layers.hashed_embedding_column(column_name, size, dimension,combiner=None, initializer=None)
tf.contrib.layers.input_from_feature_columns(columns_to_tensors,feature_columns, weight_collections=None, trainable=True, scope=None)
tf.contrib.layers.joint_weighted_sum_from_feature_columns(columns_to_tensors, feature_columns, num_outputs, weight_collections=None,trainable=True, scope=None)
tf.contrib.layers.make_place_holder_tensors_for_base_features(feature_columns)
tf.contrib.layers.one_hot_column(sparse_id_column)
tf.contrib.layers.parse_feature_columns_from_examples(serialized,feature_columns, name=None, example_names=None)
tf.contrib.layers.parse_feature_columns_from_sequence_examples(serialized,context_feature_columns, sequence_feature_columns, name=None,example_name=None)
tf.contrib.layers.real_valued_column(column_name, dimension=1,default_value=None, dtype=tf.float32, normalizer=None)
tf.contrib.layers.shared_embedding_columns(sparse_id_columns, dimension,combiner=None, shared_embedding_name=None, initializer=None,ckpt_to_load_from=None, tensor_name_in_ckpt=None)
tf.contrib.layers.sparse_column_with_hash_bucket(column_name,hash_bucket_size, combiner=None, dtype=tf.string)
tf.contrib.layers.sparse_column_with_integerized_feature(column_name,bucket_size, combiner=None, dtype=tf.int64)
tf.contrib.layers.sparse_column_with_keys(column_name, keys,default_value=-1, combiner=None)
tf.contrib.layers.weighted_sparse_column(sparse_id_column,weight_column_name, dtype=tf.float32)
tf.contrib.layers.weighted_sum_from_feature_columns(columns_to_tensors,feature_columns, num_outputs, weight_collections=None, trainable=True,scope=None)
class tf.contrib.learn.BaseEstimator
tf.contrib.learn.BaseEstimator.__init__(model_dir=None, config=None)
tf.contrib.learn.BaseEstimator.__repr__()
tf.contrib.learn.BaseEstimator.config
tf.contrib.learn.BaseEstimator.evaluate(*args, **kwargs)
tf.contrib.learn.BaseEstimator.export(*args, **kwargs)
tf.contrib.learn.BaseEstimator.fit(*args, **kwargs)
tf.contrib.learn.BaseEstimator.get_params(deep=True)
tf.contrib.learn.BaseEstimator.get_variable_names()
tf.contrib.learn.BaseEstimator.get_variable_value(name)
tf.contrib.learn.BaseEstimator.model_dir
tf.contrib.learn.BaseEstimator.partial_fit(*args, **kwargs)
tf.contrib.learn.BaseEstimator.predict(*args, **kwargs)
tf.contrib.learn.BaseEstimator.set_params(**params)
class tf.contrib.learn.Estimator
tf.contrib.learn.Estimator.__init__(model_fn=None, model_dir=None,config=None, params=None, feature_engineering_fn=None)
tf.contrib.learn.Estimator.__repr__()
tf.contrib.learn.Estimator.config
tf.contrib.learn.Estimator.evaluate(*args, **kwargs)
tf.contrib.learn.Estimator.export(*args, **kwargs)
tf.contrib.learn.Estimator.fit(*args, **kwargs)
tf.contrib.learn.Estimator.get_params(deep=True)
tf.contrib.learn.Estimator.get_variable_names()
tf.contrib.learn.Estimator.get_variable_value(name)
tf.contrib.learn.Estimator.model_dir
tf.contrib.learn.Estimator.partial_fit(*args, **kwargs)
tf.contrib.learn.Estimator.predict(*args, **kwargs)
tf.contrib.learn.Estimator.set_params(**params)
class tf.contrib.learn.Trainable
tf.contrib.learn.Trainable.fit(x=None, y=None, input_fn=None, steps=None,batch_size=None, monitors=None, max_steps=None)
class tf.contrib.learn.Evaluable
tf.contrib.learn.Evaluable.evaluate(x=None, y=None, input_fn=None,feed_fn=None, batch_size=None, steps=None, metrics=None, name=None)
class tf.contrib.learn.ModeKeys
class tf.contrib.learn.DNNClassifier
tf.contrib.learn.DNNClassifier.__init__(hidden_units, feature_columns,model_dir=None, n_classes=2, weight_column_name=None, optimizer=None,activation_fn=relu, dropout=None, gradient_clip_norm=None,enable_centered_bias=False, config=None, feature_engineering_fn=None)
tf.contrib.learn.DNNClassifier.bias_
tf.contrib.learn.DNNClassifier.config
tf.contrib.learn.DNNClassifier.evaluate(x=None, y=None, input_fn=None,feed_fn=None, batch_size=None, steps=None, metrics=None, name=None)
tf.contrib.learn.DNNClassifier.export(export_dir, input_fn=None,input_feature_key=None, use_deprecated_input_fn=True, signature_fn=None,default_batch_size=1, exports_to_keep=None)
tf.contrib.learn.DNNClassifier.fit(x=None, y=None, input_fn=None,steps=None, batch_size=None, monitors=None, max_steps=None)
tf.contrib.learn.DNNClassifier.get_variable_names()
tf.contrib.learn.DNNClassifier.get_variable_value(name)
tf.contrib.learn.DNNClassifier.model_dir
tf.contrib.learn.DNNClassifier.predict(*args, **kwargs)
tf.contrib.learn.DNNClassifier.predict_proba(*args, **kwargs)
tf.contrib.learn.DNNClassifier.weights_
class tf.contrib.learn.DNNRegressor
tf.contrib.learn.DNNRegressor.__init__(hidden_units, feature_columns,model_dir=None, weight_column_name=None, optimizer=None,activation_fn=relu, dropout=None, gradient_clip_norm=None,enable_centered_bias=False, config=None, feature_engineering_fn=None,label_dimension=1)
tf.contrib.learn.DNNRegressor.__repr__()
tf.contrib.learn.DNNRegressor.bias_
tf.contrib.learn.DNNRegressor.config
tf.contrib.learn.DNNRegressor.dnn_bias_
tf.contrib.learn.DNNRegressor.dnn_weights_
tf.contrib.learn.DNNRegressor.evaluate(*args, **kwargs)
tf.contrib.learn.DNNRegressor.export(export_dir, input_fn=None,input_feature_key=None, use_deprecated_input_fn=True, signature_fn=None,default_batch_size=None, exports_to_keep=None)
tf.contrib.learn.DNNRegressor.fit(*args, **kwargs)
tf.contrib.learn.DNNRegressor.get_params(deep=True)
tf.contrib.learn.DNNRegressor.get_variable_names()
tf.contrib.learn.DNNRegressor.get_variable_value(name)
tf.contrib.learn.DNNRegressor.linear_bias_
tf.contrib.learn.DNNRegressor.linear_weights_
tf.contrib.learn.DNNRegressor.model_dir
tf.contrib.learn.DNNRegressor.partial_fit(*args, **kwargs)
tf.contrib.learn.DNNRegressor.predict(*args, **kwargs)
tf.contrib.learn.DNNRegressor.set_params(**params)
tf.contrib.learn.DNNRegressor.weights_
class tf.contrib.learn.LinearClassifier
tf.contrib.learn.LinearClassifier.__init__(feature_columns,model_dir=None, n_classes=2, weight_column_name=None, optimizer=None,gradient_clip_norm=None, enable_centered_bias=False, _joint_weight=False,config=None, feature_engineering_fn=None)
tf.contrib.learn.LinearClassifier.bias_
tf.contrib.learn.LinearClassifier.config
tf.contrib.learn.LinearClassifier.evaluate(x=None, y=None, input_fn=None,feed_fn=None, batch_size=None, steps=None, metrics=None, name=None)
tf.contrib.learn.LinearClassifier.export(export_dir, input_fn=None,input_feature_key=None, use_deprecated_input_fn=True, signature_fn=None,default_batch_size=1, exports_to_keep=None)
tf.contrib.learn.LinearClassifier.fit(x=None, y=None, input_fn=None,steps=None, batch_size=None, monitors=None, max_steps=None)
tf.contrib.learn.LinearClassifier.get_estimator()
tf.contrib.learn.LinearClassifier.get_variable_names()
tf.contrib.learn.LinearClassifier.get_variable_value(name)
tf.contrib.learn.LinearClassifier.model_dir
tf.contrib.learn.LinearClassifier.predict(*args, **kwargs)
tf.contrib.learn.LinearClassifier.predict_proba(*args, **kwargs)
tf.contrib.learn.LinearClassifier.weights_
class tf.contrib.learn.LinearRegressor
tf.contrib.learn.LinearRegressor.__init__(feature_columns, model_dir=None,weight_column_name=None, optimizer=None, gradient_clip_norm=None,enable_centered_bias=False, label_dimension=1, _joint_weights=False,config=None, feature_engineering_fn=None)
tf.contrib.learn.LinearRegressor.bias_
tf.contrib.learn.LinearRegressor.config
tf.contrib.learn.LinearRegressor.evaluate(x=None, y=None, input_fn=None,feed_fn=None, batch_size=None, steps=None, metrics=None, name=None)
tf.contrib.learn.LinearRegressor.export(export_dir, input_fn=None,input_feature_key=None, use_deprecated_input_fn=True, signature_fn=None,default_batch_size=1, exports_to_keep=None)
tf.contrib.learn.LinearRegressor.fit(x=None, y=None, input_fn=None,steps=None, batch_size=None, monitors=None, max_steps=None)
tf.contrib.learn.LinearRegressor.get_variable_names()
tf.contrib.learn.LinearRegressor.get_variable_value(name)
tf.contrib.learn.LinearRegressor.model_dir
tf.contrib.learn.LinearRegressor.predict(*args, **kwargs)
tf.contrib.learn.LinearRegressor.weights_
class tf.contrib.learn.LogisticRegressor
tf.contrib.learn.LogisticRegressor.__init__(model_fn, thresholds=None,model_dir=None, config=None, feature_engineering_fn=None)
tf.contrib.learn.LogisticRegressor.__repr__()
tf.contrib.learn.LogisticRegressor.config
tf.contrib.learn.LogisticRegressor.evaluate(x=None, y=None, input_fn=None,feed_fn=None, batch_size=None, steps=None, metrics=None, name=None)
tf.contrib.learn.LogisticRegressor.export(*args, **kwargs)
tf.contrib.learn.LogisticRegressor.fit(*args, **kwargs)
tf.contrib.learn.LogisticRegressor.get_default_metrics(cls,thresholds=None)
tf.contrib.learn.LogisticRegressor.get_params(deep=True)
tf.contrib.learn.LogisticRegressor.get_variable_names()
tf.contrib.learn.LogisticRegressor.get_variable_value(name)
tf.contrib.learn.LogisticRegressor.model_dir
tf.contrib.learn.LogisticRegressor.partial_fit(*args, **kwargs)
tf.contrib.learn.LogisticRegressor.predict(*args, **kwargs)
tf.contrib.learn.LogisticRegressor.set_params(**params)
class tf.train.NanLossDuringTrainingError
tf.train.NanLossDuringTrainingError.__str__()
class tf.contrib.learn.RunConfig
tf.contrib.learn.RunConfig.__init__(master=None, num_cores=0,log_device_placement=False, gpu_memory_fraction=1, tf_random_seed=None,save_summary_steps=100, save_checkpoints_secs=600,save_checkpoints_steps=None, keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000, evaluation_master='')
tf.contrib.learn.RunConfig.cluster_spec
tf.contrib.learn.RunConfig.environment
tf.contrib.learn.RunConfig.evaluation_master
tf.contrib.learn.RunConfig.get_task_id()
tf.contrib.learn.RunConfig.is_chief
tf.contrib.learn.RunConfig.master
tf.contrib.learn.RunConfig.num_ps_replicas
tf.contrib.learn.RunConfig.task_id
tf.contrib.learn.RunConfig.task_type
tf.contrib.learn.evaluate(graph, output_dir, checkpoint_path, eval_dict,update_op=None, global_step_tensor=None, supervisor_master='',log_every_steps=10, feed_fn=None, max_steps=None)
tf.contrib.learn.infer(restore_checkpoint_path, output_dict,feed_dict=None)
tf.contrib.learn.run_feeds(*args, **kwargs)
tf.contrib.learn.run_n(output_dict, feed_dict=None,restore_checkpoint_path=None, n=1)
tf.contrib.learn.train(graph, output_dir, train_op, loss_op,global_step_tensor=None, init_op=None, init_feed_dict=None, init_fn=None,log_every_steps=10, supervisor_is_chief=True, supervisor_master='',supervisor_save_model_secs=600, keep_checkpoint_max=5,supervisor_save_summaries_steps=100, feed_fn=None, steps=None,fail_on_nan_loss=True, monitors=None, max_steps=None)
tf.contrib.learn.extract_dask_data(data)
tf.contrib.learn.extract_dask_labels(labels)
tf.contrib.learn.extract_pandas_data(data)
tf.contrib.learn.extract_pandas_labels(labels)
tf.contrib.learn.extract_pandas_matrix(data)
tf.contrib.learn.read_batch_examples(file_pattern, batch_size, reader,randomize_input=True, num_epochs=None, queue_capacity=10000,num_threads=1, read_batch_size=1, parse_fn=None, name=None)
tf.contrib.learn.read_batch_features(file_pattern, batch_size, features,reader, randomize_input=True, num_epochs=None, queue_capacity=10000,feature_queue_capacity=100, reader_num_threads=1, parse_fn=None,name=None)
tf.contrib.learn.read_batch_record_features(file_pattern, batch_size,features, randomize_input=True, num_epochs=None, queue_capacity=10000,reader_num_threads=1, name='dequeue_record_examples')
tf.contrib.learn.monitors.get_default_monitors(loss_op=None,summary_op=None, save_summary_steps=100, output_dir=None,summary_writer=None)
class tf.contrib.learn.monitors.BaseMonitor
tf.contrib.learn.monitors.BaseMonitor.__init__(*args, **kwargs)
tf.contrib.learn.monitors.BaseMonitor.begin(max_steps=None)
tf.contrib.learn.monitors.BaseMonitor.end(session=None)
tf.contrib.learn.monitors.BaseMonitor.epoch_begin(epoch)
tf.contrib.learn.monitors.BaseMonitor.epoch_end(epoch)
tf.contrib.learn.monitors.BaseMonitor.post_step(step, session)
tf.contrib.learn.monitors.BaseMonitor.run_on_all_workers
tf.contrib.learn.monitors.BaseMonitor.set_estimator(estimator)
tf.contrib.learn.monitors.BaseMonitor.step_begin(step)
tf.contrib.learn.monitors.BaseMonitor.step_end(step, output)
class tf.contrib.learn.monitors.CaptureVariable
tf.contrib.learn.monitors.CaptureVariable.__init__(var_name, every_n=100,first_n=1)
tf.contrib.learn.monitors.CaptureVariable.begin(max_steps=None)
tf.contrib.learn.monitors.CaptureVariable.end(session=None)
tf.contrib.learn.monitors.CaptureVariable.epoch_begin(epoch)
tf.contrib.learn.monitors.CaptureVariable.epoch_end(epoch)
tf.contrib.learn.monitors.CaptureVariable.every_n_post_step(step, session)
tf.contrib.learn.monitors.CaptureVariable.every_n_step_begin(step)
tf.contrib.learn.monitors.CaptureVariable.every_n_step_end(step, outputs)
tf.contrib.learn.monitors.CaptureVariable.post_step(step, session)
tf.contrib.learn.monitors.CaptureVariable.run_on_all_workers
tf.contrib.learn.monitors.CaptureVariable.set_estimator(estimator)
tf.contrib.learn.monitors.CaptureVariable.step_begin(step)
tf.contrib.learn.monitors.CaptureVariable.step_end(step, output)
tf.contrib.learn.monitors.CaptureVariable.values
class tf.contrib.learn.monitors.CheckpointSaver
tf.contrib.learn.monitors.CheckpointSaver.__init__(checkpoint_dir,save_secs=None, save_steps=None, saver=None, checkpoint_basename='model.ckpt', scaffold=None)
tf.contrib.learn.monitors.CheckpointSaver.begin(max_steps=None)
tf.contrib.learn.monitors.CheckpointSaver.end(session=None)
tf.contrib.learn.monitors.CheckpointSaver.epoch_begin(epoch)
tf.contrib.learn.monitors.CheckpointSaver.epoch_end(epoch)
tf.contrib.learn.monitors.CheckpointSaver.post_step(step, session)
tf.contrib.learn.monitors.CheckpointSaver.run_on_all_workers
tf.contrib.learn.monitors.CheckpointSaver.set_estimator(estimator)
tf.contrib.learn.monitors.CheckpointSaver.step_begin(step)
tf.contrib.learn.monitors.CheckpointSaver.step_end(step, output)
class tf.contrib.learn.monitors.EveryN
tf.contrib.learn.monitors.EveryN.__init__(every_n_steps=100,first_n_steps=1)
tf.contrib.learn.monitors.EveryN.begin(max_steps=None)
tf.contrib.learn.monitors.EveryN.end(session=None)
tf.contrib.learn.monitors.EveryN.epoch_begin(epoch)
tf.contrib.learn.monitors.EveryN.epoch_end(epoch)
tf.contrib.learn.monitors.EveryN.every_n_post_step(step, session)
tf.contrib.learn.monitors.EveryN.every_n_step_begin(step)
tf.contrib.learn.monitors.EveryN.every_n_step_end(step, outputs)
tf.contrib.learn.monitors.EveryN.post_step(step, session)
tf.contrib.learn.monitors.EveryN.run_on_all_workers
tf.contrib.learn.monitors.EveryN.set_estimator(estimator)
tf.contrib.learn.monitors.EveryN.step_begin(step)
tf.contrib.learn.monitors.EveryN.step_end(step, output)
class tf.contrib.learn.monitors.ExportMonitor
tf.contrib.learn.monitors.ExportMonitor.__init__(*args, **kwargs)
tf.contrib.learn.monitors.ExportMonitor.begin(max_steps=None)
tf.contrib.learn.monitors.ExportMonitor.end(session=None)
tf.contrib.learn.monitors.ExportMonitor.epoch_begin(epoch)
tf.contrib.learn.monitors.ExportMonitor.epoch_end(epoch)
tf.contrib.learn.monitors.ExportMonitor.every_n_post_step(step, session)
tf.contrib.learn.monitors.ExportMonitor.every_n_step_begin(step)
tf.contrib.learn.monitors.ExportMonitor.every_n_step_end(step, outputs)
tf.contrib.learn.monitors.ExportMonitor.export_dir
tf.contrib.learn.monitors.ExportMonitor.exports_to_keep
tf.contrib.learn.monitors.ExportMonitor.last_export_dir
tf.contrib.learn.monitors.ExportMonitor.post_step(step, session)
tf.contrib.learn.monitors.ExportMonitor.run_on_all_workers
tf.contrib.learn.monitors.ExportMonitor.set_estimator(estimator)
tf.contrib.learn.monitors.ExportMonitor.signature_fn
tf.contrib.learn.monitors.ExportMonitor.step_begin(step)
tf.contrib.learn.monitors.ExportMonitor.step_end(step, output)
class tf.contrib.learn.monitors.GraphDump
tf.contrib.learn.monitors.GraphDump.__init__(ignore_ops=None)
tf.contrib.learn.monitors.GraphDump.begin(max_steps=None)
tf.contrib.learn.monitors.GraphDump.compare(other_dump, step, atol=1e-06)
tf.contrib.learn.monitors.GraphDump.data
tf.contrib.learn.monitors.GraphDump.end(session=None)
tf.contrib.learn.monitors.GraphDump.epoch_begin(epoch)
tf.contrib.learn.monitors.GraphDump.epoch_end(epoch)
tf.contrib.learn.monitors.GraphDump.post_step(step, session)
tf.contrib.learn.monitors.GraphDump.run_on_all_workers
tf.contrib.learn.monitors.GraphDump.set_estimator(estimator)
tf.contrib.learn.monitors.GraphDump.step_begin(step)
tf.contrib.learn.monitors.GraphDump.step_end(step, output)
class tf.contrib.learn.monitors.LoggingTrainable
tf.contrib.learn.monitors.LoggingTrainable.__init__(scope=None,every_n=100, first_n=1)
tf.contrib.learn.monitors.LoggingTrainable.begin(max_steps=None)
tf.contrib.learn.monitors.LoggingTrainable.end(session=None)
tf.contrib.learn.monitors.LoggingTrainable.epoch_begin(epoch)
tf.contrib.learn.monitors.LoggingTrainable.epoch_end(epoch)
tf.contrib.learn.monitors.LoggingTrainable.every_n_post_step(step,session)
tf.contrib.learn.monitors.LoggingTrainable.every_n_step_begin(step)
tf.contrib.learn.monitors.LoggingTrainable.every_n_step_end(step, outputs)
tf.contrib.learn.monitors.LoggingTrainable.post_step(step, session)
tf.contrib.learn.monitors.LoggingTrainable.run_on_all_workers
tf.contrib.learn.monitors.LoggingTrainable.set_estimator(estimator)
tf.contrib.learn.monitors.LoggingTrainable.step_begin(step)
tf.contrib.learn.monitors.LoggingTrainable.step_end(step, output)
class tf.contrib.learn.monitors.NanLoss
tf.contrib.learn.monitors.NanLoss.__init__(loss_tensor, every_n_steps=100,fail_on_nan_loss=True)
tf.contrib.learn.monitors.NanLoss.begin(max_steps=None)
tf.contrib.learn.monitors.NanLoss.end(session=None)
tf.contrib.learn.monitors.NanLoss.epoch_begin(epoch)
tf.contrib.learn.monitors.NanLoss.epoch_end(epoch)
tf.contrib.learn.monitors.NanLoss.every_n_post_step(step, session)
tf.contrib.learn.monitors.NanLoss.every_n_step_begin(step)
tf.contrib.learn.monitors.NanLoss.every_n_step_end(step, outputs)
tf.contrib.learn.monitors.NanLoss.post_step(step, session)
tf.contrib.learn.monitors.NanLoss.run_on_all_workers
tf.contrib.learn.monitors.NanLoss.set_estimator(estimator)
tf.contrib.learn.monitors.NanLoss.step_begin(step)
tf.contrib.learn.monitors.NanLoss.step_end(step, output)
class tf.contrib.learn.monitors.PrintTensor
tf.contrib.learn.monitors.PrintTensor.__init__(tensor_names, every_n=100,first_n=1)
tf.contrib.learn.monitors.PrintTensor.begin(max_steps=None)
tf.contrib.learn.monitors.PrintTensor.end(session=None)
tf.contrib.learn.monitors.PrintTensor.epoch_begin(epoch)
tf.contrib.learn.monitors.PrintTensor.epoch_end(epoch)
tf.contrib.learn.monitors.PrintTensor.every_n_post_step(step, session)
tf.contrib.learn.monitors.PrintTensor.every_n_step_begin(step)
tf.contrib.learn.monitors.PrintTensor.every_n_step_end(step, outputs)
tf.contrib.learn.monitors.PrintTensor.post_step(step, session)
tf.contrib.learn.monitors.PrintTensor.run_on_all_workers
tf.contrib.learn.monitors.PrintTensor.set_estimator(estimator)
tf.contrib.learn.monitors.PrintTensor.step_begin(step)
tf.contrib.learn.monitors.PrintTensor.step_end(step, output)
class tf.contrib.learn.monitors.StepCounter
tf.contrib.learn.monitors.StepCounter.__init__(every_n_steps=100,output_dir=None, summary_writer=None)
tf.contrib.learn.monitors.StepCounter.begin(max_steps=None)
tf.contrib.learn.monitors.StepCounter.end(session=None)
tf.contrib.learn.monitors.StepCounter.epoch_begin(epoch)
tf.contrib.learn.monitors.StepCounter.epoch_end(epoch)
tf.contrib.learn.monitors.StepCounter.every_n_post_step(step, session)
tf.contrib.learn.monitors.StepCounter.every_n_step_begin(step)
tf.contrib.learn.monitors.StepCounter.every_n_step_end(current_step,outputs)
tf.contrib.learn.monitors.StepCounter.post_step(step, session)
tf.contrib.learn.monitors.StepCounter.run_on_all_workers
tf.contrib.learn.monitors.StepCounter.set_estimator(estimator)
tf.contrib.learn.monitors.StepCounter.step_begin(step)
tf.contrib.learn.monitors.StepCounter.step_end(step, output)
class tf.contrib.learn.monitors.StopAtStep
tf.contrib.learn.monitors.StopAtStep.__init__(num_steps=None,last_step=None)
tf.contrib.learn.monitors.StopAtStep.begin(max_steps=None)
tf.contrib.learn.monitors.StopAtStep.end(session=None)
tf.contrib.learn.monitors.StopAtStep.epoch_begin(epoch)
tf.contrib.learn.monitors.StopAtStep.epoch_end(epoch)
tf.contrib.learn.monitors.StopAtStep.post_step(step, session)
tf.contrib.learn.monitors.StopAtStep.run_on_all_workers
tf.contrib.learn.monitors.StopAtStep.set_estimator(estimator)
tf.contrib.learn.monitors.StopAtStep.step_begin(step)
tf.contrib.learn.monitors.StopAtStep.step_end(step, output)
class tf.contrib.learn.monitors.SummarySaver
tf.contrib.learn.monitors.SummarySaver.__init__(summary_op,save_steps=100, output_dir=None, summary_writer=None, scaffold=None)
tf.contrib.learn.monitors.SummarySaver.begin(max_steps=None)
tf.contrib.learn.monitors.SummarySaver.end(session=None)
tf.contrib.learn.monitors.SummarySaver.epoch_begin(epoch)
tf.contrib.learn.monitors.SummarySaver.epoch_end(epoch)
tf.contrib.learn.monitors.SummarySaver.every_n_post_step(step, session)
tf.contrib.learn.monitors.SummarySaver.every_n_step_begin(step)
tf.contrib.learn.monitors.SummarySaver.every_n_step_end(step, outputs)
tf.contrib.learn.monitors.SummarySaver.post_step(step, session)
tf.contrib.learn.monitors.SummarySaver.run_on_all_workers
tf.contrib.learn.monitors.SummarySaver.set_estimator(estimator)
tf.contrib.learn.monitors.SummarySaver.step_begin(step)
tf.contrib.learn.monitors.SummarySaver.step_end(step, output)
class tf.contrib.learn.monitors.ValidationMonitor
tf.contrib.learn.monitors.ValidationMonitor.__init__(x=None, y=None,input_fn=None, batch_size=None, eval_steps=None, every_n_steps=100,metrics=None, early_stopping_rounds=None, early_stopping_metric='loss',early_stopping_metric_minimize=True, name=None)
tf.contrib.learn.monitors.ValidationMonitor.begin(max_steps=None)
tf.contrib.learn.monitors.ValidationMonitor.best_step
tf.contrib.learn.monitors.ValidationMonitor.best_value
tf.contrib.learn.monitors.ValidationMonitor.early_stopped
tf.contrib.learn.monitors.ValidationMonitor.end(session=None)
tf.contrib.learn.monitors.ValidationMonitor.epoch_begin(epoch)
tf.contrib.learn.monitors.ValidationMonitor.epoch_end(epoch)
tf.contrib.learn.monitors.ValidationMonitor.every_n_post_step(step,session)
tf.contrib.learn.monitors.ValidationMonitor.every_n_step_begin(step)
tf.contrib.learn.monitors.ValidationMonitor.every_n_step_end(step,outputs)
tf.contrib.learn.monitors.ValidationMonitor.post_step(step, session)
tf.contrib.learn.monitors.ValidationMonitor.run_on_all_workers
tf.contrib.learn.monitors.ValidationMonitor.set_estimator(estimator)
tf.contrib.learn.monitors.ValidationMonitor.step_begin(step)
tf.contrib.learn.monitors.ValidationMonitor.step_end(step, output)
class tf.contrib.learn.monitors.RunHookAdapterForMonitors
tf.contrib.learn.monitors.RunHookAdapterForMonitors.__init__(monitors)
tf.contrib.learn.monitors.RunHookAdapterForMonitors.after_run(run_context, run_values)
tf.contrib.learn.monitors.RunHookAdapterForMonitors.before_run(run_context)
tf.contrib.learn.monitors.RunHookAdapterForMonitors.begin()
tf.contrib.learn.monitors.RunHookAdapterForMonitors.end(session)
tf.contrib.learn.monitors.replace_monitors_with_hooks(monitors_or_hooks,estimator)
tf.contrib.losses.absolute_difference(*args,**kwargs)
tf.contrib.losses.add_loss(*args, **kwargs)
tf.contrib.losses.compute_weighted_loss(*args,**kwargs)
tf.contrib.losses.cosine_distance(*args, **kwargs)
tf.contrib.losses.get_losses(scope=None,loss_collection='losses')
tf.contrib.losses.get_regularization_losses(scope=None)
tf.contrib.losses.get_total_loss(add_regularization_losses=True, name='total_loss')
tf.contrib.losses.hinge_loss(*args, **kwargs)
tf.contrib.losses.log_loss(*args, **kwargs)
tf.contrib.losses.mean_pairwise_squared_error(*args, **kwargs)
tf.contrib.losses.mean_squared_error(*args,**kwargs)
tf.contrib.losses.sigmoid_cross_entropy(*args,**kwargs)
tf.contrib.losses.softmax_cross_entropy(*args,**kwargs)
tf.contrib.losses.sparse_softmax_cross_entropy(*args, **kwargs)
class tf.contrib.rnn.LSTMBlockCell
tf.contrib.rnn.LSTMBlockCell.__call__(x, states_prev, scope=None)
tf.contrib.rnn.LSTMBlockCell.__init__(num_units, forget_bias=1.0,use_peephole=False, use_compatible_names=False)
tf.contrib.rnn.LSTMBlockCell.output_size
tf.contrib.rnn.LSTMBlockCell.state_size
tf.contrib.rnn.LSTMBlockCell.zero_state(batch_size, dtype)
class tf.contrib.rnn.GRUBlockCell
tf.contrib.rnn.GRUBlockCell.__call__(x, h_prev, scope=None)
tf.contrib.rnn.GRUBlockCell.__init__(cell_size)
tf.contrib.rnn.GRUBlockCell.output_size
tf.contrib.rnn.GRUBlockCell.state_size
tf.contrib.rnn.GRUBlockCell.zero_state(batch_size, dtype)
class tf.contrib.rnn.FusedRNNCell
tf.contrib.rnn.FusedRNNCell.__call__(inputs, initial_state=None,dtype=None, sequence_length=None, scope=None)
class tf.contrib.rnn.FusedRNNCellAdaptor
tf.contrib.rnn.FusedRNNCellAdaptor.__call__(inputs, initial_state=None,dtype=None, sequence_length=None, scope=None)
tf.contrib.rnn.FusedRNNCellAdaptor.__init__(cell, use_dynamic_rnn=False)
class tf.contrib.rnn.TimeReversedFusedRNN
tf.contrib.rnn.TimeReversedFusedRNN.__call__(inputs, initial_state=None,dtype=None, sequence_length=None, scope=None)
tf.contrib.rnn.TimeReversedFusedRNN.__init__(cell)
class tf.contrib.rnn.LSTMBlockFusedCell
tf.contrib.rnn.LSTMBlockFusedCell.__call__(inputs, initial_state=None,dtype=None, sequence_length=None, scope=None)
tf.contrib.rnn.LSTMBlockFusedCell.__init__(num_units, forget_bias=1.0,cell_clip=None, use_peephole=False)
tf.contrib.rnn.LSTMBlockFusedCell.num_units
class tf.contrib.rnn.CoupledInputForgetGateLSTMCell
tf.contrib.rnn.CoupledInputForgetGateLSTMCell.__call__(inputs, state,scope=None)
tf.contrib.rnn.CoupledInputForgetGateLSTMCell.__init__(num_units,use_peepholes=False, initializer=None, num_proj=None, proj_clip=None,num_unit_shards=1, num_proj_shards=1, forget_bias=1.0,state_is_tuple=False, activation=tanh)
tf.contrib.rnn.CoupledInputForgetGateLSTMCell.output_size
tf.contrib.rnn.CoupledInputForgetGateLSTMCell.state_size
tf.contrib.rnn.CoupledInputForgetGateLSTMCell.zero_state(batch_size,dtype)
class tf.contrib.rnn.TimeFreqLSTMCell
tf.contrib.rnn.TimeFreqLSTMCell.__call__(inputs, state, scope=None)
tf.contrib.rnn.TimeFreqLSTMCell.__init__(num_units, use_peepholes=False,cell_clip=None, initializer=None, num_unit_shards=1, forget_bias=1.0,feature_size=None, frequency_skip=None)
tf.contrib.rnn.TimeFreqLSTMCell.output_size
tf.contrib.rnn.TimeFreqLSTMCell.state_size
tf.contrib.rnn.TimeFreqLSTMCell.zero_state(batch_size, dtype)
class tf.contrib.rnn.GridLSTMCell
tf.contrib.rnn.GridLSTMCell.__call__(inputs, state, scope=None)
tf.contrib.rnn.GridLSTMCell.__init__(num_units, use_peepholes=False,share_time_frequency_weights=False, cell_clip=None, initializer=None,num_unit_shards=1, forget_bias=1.0, feature_size=None,frequency_skip=None, num_frequency_blocks=None, start_freqindex_list=None,end_freqindex_list=None, couple_input_forget_gates=False,state_is_tuple=False)
tf.contrib.rnn.GridLSTMCell.output_size
tf.contrib.rnn.GridLSTMCell.state_size
tf.contrib.rnn.GridLSTMCell.state_tuple_type
tf.contrib.rnn.GridLSTMCell.zero_state(batch_size, dtype)
class tf.contrib.rnn.AttentionCellWrapper
tf.contrib.rnn.AttentionCellWrapper.__call__(inputs, state, scope=None)
tf.contrib.rnn.AttentionCellWrapper.__init__(cell, attn_length,attn_size=None, attn_vec_size=None, input_size=None, state_is_tuple=False)
tf.contrib.rnn.AttentionCellWrapper.output_size
tf.contrib.rnn.AttentionCellWrapper.state_size
tf.contrib.rnn.AttentionCellWrapper.zero_state(batch_size, dtype)
class tf.contrib.rnn.BidirectionalGridLSTMCell
tf.contrib.rnn.BidirectionalGridLSTMCell.__call__(inputs, state,scope=None)
tf.contrib.rnn.BidirectionalGridLSTMCell.__init__(num_units,use_peepholes=False, share_time_frequency_weights=False, cell_clip=None,initializer=None, num_unit_shards=1, forget_bias=1.0, feature_size=None,frequency_skip=None, num_frequency_blocks=None, start_freqindex_list=None,end_freqindex_list=None, couple_input_forget_gates=False,backward_slice_offset=0)
tf.contrib.rnn.BidirectionalGridLSTMCell.output_size
tf.contrib.rnn.BidirectionalGridLSTMCell.state_size
tf.contrib.rnn.BidirectionalGridLSTMCell.state_tuple_type
tf.contrib.rnn.BidirectionalGridLSTMCell.zero_state(batch_size, dtype)
class tf.contrib.rnn.LSTMBlockWrapper
tf.contrib.rnn.LSTMBlockWrapper.__call__(inputs, initial_state=None,dtype=None, sequence_length=None, scope=None)
tf.contrib.rnn.LSTMBlockWrapper.num_units
class tf.contrib.rnn.LayerNormBasicLSTMCell
tf.contrib.rnn.LayerNormBasicLSTMCell.__call__(inputs, state, scope=None)
tf.contrib.rnn.LayerNormBasicLSTMCell.__init__(num_units, forget_bias=1.0,input_size=None, activation=tanh, layer_norm=True, norm_gain=1.0,norm_shift=0.0, dropout_keep_prob=1.0, dropout_prob_seed=None)
tf.contrib.rnn.LayerNormBasicLSTMCell.output_size
tf.contrib.rnn.LayerNormBasicLSTMCell.state_size
tf.contrib.rnn.LayerNormBasicLSTMCell.zero_state(batch_size, dtype)
tf.contrib.rnn.stack_bidirectional_dynamic_rnn(cells_fw, cells_bw, inputs,initial_states_fw=None, initial_states_bw=None, dtype=None,sequence_length=None, scope=None)
tf.contrib.rnn.stack_bidirectional_rnn(cells_fw, cells_bw, inputs,initial_states_fw=None, initial_states_bw=None, dtype=None,sequence_length=None, scope=None)
tf.contrib.metrics.streaming_accuracy(predictions, labels, weights=None,metrics_collections=None, updates_collections=None, name=None)
tf.contrib.metrics.streaming_mean(values, weights=None,metrics_collections=None, updates_collections=None, name=None)
tf.contrib.metrics.streaming_recall(predictions, labels, weights=None,metrics_collections=None, updates_collections=None, name=None)
tf.contrib.metrics.streaming_precision(predictions, labels, weights=None,metrics_collections=None, updates_collections=None, name=None)
tf.contrib.metrics.streaming_auc(predictions, labels, weights=None,num_thresholds=200, metrics_collections=None, updates_collections=None,curve='ROC', name=None)
tf.contrib.metrics.streaming_recall_at_k(*args, **kwargs)
tf.contrib.metrics.streaming_mean_absolute_error(predictions, labels,weights=None, metrics_collections=None, updates_collections=None,name=None)
tf.contrib.metrics.streaming_mean_iou(predictions, labels, num_classes,weights=None, metrics_collections=None, updates_collections=None,name=None)
tf.contrib.metrics.streaming_mean_relative_error(predictions, labels,normalizer, weights=None, metrics_collections=None,updates_collections=None, name=None)
tf.contrib.metrics.streaming_mean_squared_error(predictions, labels,weights=None, metrics_collections=None, updates_collections=None,name=None)
tf.contrib.metrics.streaming_root_mean_squared_error(predictions, labels,weights=None, metrics_collections=None, updates_collections=None,name=None)
tf.contrib.metrics.streaming_covariance(predictions, labels, weights=None,metrics_collections=None, updates_collections=None, name=None)
tf.contrib.metrics.streaming_pearson_correlation(predictions, labels,weights=None, metrics_collections=None, updates_collections=None,name=None)
tf.contrib.metrics.streaming_mean_cosine_distance(predictions, labels,dim, weights=None, metrics_collections=None, updates_collections=None,name=None)
tf.contrib.metrics.streaming_percentage_less(values, threshold,weights=None, metrics_collections=None, updates_collections=None,name=None)
tf.contrib.metrics.streaming_sensitivity_at_specificity(predictions,labels, specificity, weights=None, num_thresholds=200,metrics_collections=None, updates_collections=None, name=None)
tf.contrib.metrics.streaming_sparse_average_precision_at_k(predictions,labels, k, weights=None, metrics_collections=None,updates_collections=None, name=None)
tf.contrib.metrics.streaming_sparse_precision_at_k(predictions, labels, k,class_id=None, weights=None, metrics_collections=None,updates_collections=None, name=None)
tf.contrib.metrics.streaming_sparse_precision_at_top_k(top_k_predictions,labels, class_id=None, weights=None, metrics_collections=None,updates_collections=None, name=None)
tf.contrib.metrics.streaming_sparse_recall_at_k(predictions, labels, k,class_id=None, weights=None, metrics_collections=None,updates_collections=None, name=None)
tf.contrib.metrics.streaming_specificity_at_sensitivity(predictions,labels, sensitivity, weights=None, num_thresholds=200,metrics_collections=None, updates_collections=None, name=None)
tf.contrib.metrics.streaming_concat(values, axis=0, max_size=None,metrics_collections=None, updates_collections=None, name=None)
tf.contrib.metrics.auc_using_histogram(boolean_labels, scores,score_range, nbins=100, collections=None, check_shape=True, name=None)
tf.contrib.metrics.accuracy(predictions, labels, weights=None)
tf.contrib.metrics.confusion_matrix(predictions, labels, num_classes=None,dtype=tf.int32, name=None, weights=None)
tf.contrib.metrics.aggregate_metrics(*value_update_tuples)
tf.contrib.metrics.aggregate_metric_map(names_to_tuples)
tf.contrib.metrics.set_difference(a, b, aminusb=True,validate_indices=True)
tf.contrib.metrics.set_intersection(a, b,validate_indices=True)
tf.contrib.metrics.set_size(a, validate_indices=True)
tf.contrib.metrics.set_union(a, b, validate_indices=True)
tf.contrib.training.batch_sequences_with_states(input_key,input_sequences, input_context, input_length, initial_states, num_unroll,batch_size, num_threads=3, capacity=1000, allow_small_batch=True,pad=True, name=None)
class tf.contrib.training.NextQueuedSequenceBatch
tf.contrib.training.NextQueuedSequenceBatch.__init__(state_saver)
tf.contrib.training.NextQueuedSequenceBatch.batch_size
tf.contrib.training.NextQueuedSequenceBatch.context
tf.contrib.training.NextQueuedSequenceBatch.insertion_index
tf.contrib.training.NextQueuedSequenceBatch.key
tf.contrib.training.NextQueuedSequenceBatch.length
tf.contrib.training.NextQueuedSequenceBatch.next_key
tf.contrib.training.NextQueuedSequenceBatch.save_state(state_name, value,name=None)
tf.contrib.training.NextQueuedSequenceBatch.sequence
tf.contrib.training.NextQueuedSequenceBatch.sequence_count
tf.contrib.training.NextQueuedSequenceBatch.sequences
tf.contrib.training.NextQueuedSequenceBatch.state(state_name)
tf.contrib.training.NextQueuedSequenceBatch.total_length
class tf.contrib.training.SequenceQueueingStateSaver
tf.contrib.training.SequenceQueueingStateSaver.__init__(batch_size,num_unroll, input_length, input_key, input_sequences, input_context,initial_states, capacity=None, allow_small_batch=False, name=None)
tf.contrib.training.SequenceQueueingStateSaver.barrier
tf.contrib.training.SequenceQueueingStateSaver.batch_size
tf.contrib.training.SequenceQueueingStateSaver.close(cancel_pending_enqueues=False, name=None)
tf.contrib.training.SequenceQueueingStateSaver.name
tf.contrib.training.SequenceQueueingStateSaver.next_batch
tf.contrib.training.SequenceQueueingStateSaver.num_unroll
tf.contrib.training.SequenceQueueingStateSaver.prefetch_op
tf.contrib.training.rejection_sample(tensors, accept_prob_fn, batch_size,queue_threads=1, enqueue_many=False, prebatch_capacity=16,prebatch_threads=1, runtime_checks=False, name=None)
tf.contrib.training.resample_at_rate(inputs, rates, scope=None, seed=None,back_prop=False)
tf.contrib.training.stratified_sample(tensors, labels, target_probs,batch_size, init_probs=None, enqueue_many=False, queue_capacity=16,threads_per_queue=1, name=None)
tf.contrib.training.weighted_resample(inputs, weights, overall_rate,scope=None, mean_decay=0.999, warmup=10, seed=None)
tf.contrib.training.bucket(tensors, which_bucket, batch_size, num_buckets,num_threads=1, capacity=32, shapes=None, dynamic_pad=False,allow_smaller_final_batch=False, keep_input=None, shared_name=None,name=None)
tf.contrib.training.bucket_by_sequence_length(input_length, tensors,batch_size, bucket_boundaries, num_threads=1, capacity=32, shapes=None,dynamic_pad=False, allow_smaller_final_batch=False, keep_input=None,shared_name=None, name=None)
tf.contrib.util.constant_value(tensor)
tf.contrib.util.make_tensor_proto(values, dtype=None,shape=None, verify_shape=False)
tf.contrib.util.make_ndarray(tensor)
tf.contrib.util.ops_used_by_graph_def(graph_def)
tf.contrib.util.stripped_op_list_for_graph(graph_def)
tf.contrib.copy_graph.copy_op_to_graph(org_instance, to_graph,variables, scope='')
tf.contrib.copy_graph.copy_variable_to_graph(org_instance,to_graph, scope='')
tf.contrib.copy_graph.get_copied_op(org_instance, graph,scope='')